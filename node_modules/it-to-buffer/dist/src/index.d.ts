/**
 * @packageDocumentation
 *
 * Collects all `Uint8Array` values from an (async)iterable and returns them as a single `Uint8Array`.
 *
 * @example
 *
 * ```javascript
 * import toBuffer from 'it-to-buffer'
 *
 * // This can also be an iterator, generator, etc
 * const values = [Buffer.from([0, 1]), Buffer.from([2, 3])]
 *
 * const result = toBuffer(values)
 *
 * console.info(result) // Buffer[0, 1, 2, 3]
 * ```
 *
 * Async sources must be awaited:
 *
 * ```javascript
 * import toBuffer from 'it-to-buffer'
 *
 * const values = async function * () {
 *   yield Buffer.from([0, 1])
 *   yield Buffer.from([2, 3])
 * }
 *
 * const result = await toBuffer(values())
 *
 * console.info(result) // Buffer[0, 1, 2, 3]
 * ```
 */
/**
 * Takes an (async) iterable that yields buffer-like-objects and concats them
 * into one buffer
 */
declare function toBuffer(source: Iterable<Uint8Array>): Uint8Array;
declare function toBuffer(source: Iterable<Uint8Array> | AsyncIterable<Uint8Array>): Promise<Uint8Array>;
export default toBuffer;
//# sourceMappingURL=index.d.ts.map