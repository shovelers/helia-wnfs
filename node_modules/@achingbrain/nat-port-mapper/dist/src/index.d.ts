export interface NatAPIOptions {
    /**
     * Minimum 20 minutes, default 2 hours
     */
    ttl?: number;
    description?: string;
    gateway?: string;
    keepAlive?: boolean;
}
export interface MapPortOptions {
    publicPort: number;
    localPort: number;
    localAddress: string;
    protocol: 'TCP' | 'UDP';
    description: string;
    ttl: number;
    gateway?: string;
}
export interface UnmapPortOptions {
    publicPort: number;
    localPort: number;
    protocol: 'TCP' | 'UDP';
}
export interface Client {
    close(): Promise<void>;
    map(options: MapPortOptions): Promise<void>;
    unmap(options: UnmapPortOptions): Promise<void>;
    externalIp(): Promise<string>;
}
export declare class NatAPI {
    openPorts: MapPortOptions[];
    private readonly ttl;
    private readonly description;
    private readonly gateway?;
    private readonly keepAlive;
    private readonly keepAliveInterval;
    private readonly destroyed;
    private readonly client;
    private readonly updateIntervals;
    constructor(opts: NatAPIOptions | undefined, client: Client);
    map(options?: Partial<MapPortOptions>): Promise<void>;
    unmap(options: Partial<UnmapPortOptions>): Promise<void>;
    close(): Promise<void>;
    validateInput(options?: Partial<MapPortOptions>): MapPortOptions;
    externalIp(): Promise<string>;
}
export declare function upnpNat(options?: Partial<NatAPIOptions>): NatAPI;
export declare function pmpNat(options?: Partial<NatAPIOptions>): Promise<NatAPI>;
//# sourceMappingURL=index.d.ts.map