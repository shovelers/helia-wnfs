import ssdp from '@achingbrain/ssdp';
import { logger } from '@libp2p/logger';
import first from 'it-first';
import pTimeout from 'p-timeout';
const log = logger('nat-port-mapper:discovery');
const ST = 'urn:schemas-upnp-org:device:InternetGatewayDevice:1';
const ONE_MINUTE = 60000;
const ONE_HOUR = ONE_MINUTE * 60;
export function discoverGateway(options = {}) {
    const timeout = options.timeout ?? ONE_HOUR;
    const discoveryTimeout = options.discoveryTimeout ?? ONE_MINUTE;
    let service;
    let expires;
    return () => {
        let discovery;
        let clear;
        const discover = {
            gateway: async () => {
                if (service != null && !(expires < Date.now())) {
                    return service;
                }
                if (options.gateway != null) {
                    log('Using overridden gateway address %s', options.gateway);
                    if (!options.gateway.startsWith('http')) {
                        options.gateway = `http://${options.gateway}`;
                    }
                    expires = Date.now() + timeout;
                    service = {
                        location: new URL(options.gateway),
                        details: {
                            device: {
                                serviceList: {
                                    service: []
                                },
                                deviceList: {
                                    device: []
                                }
                            }
                        },
                        expires,
                        serviceType: ST,
                        uniqueServiceName: 'unknown'
                    };
                }
                else {
                    if (discovery == null) {
                        discovery = await ssdp({
                            start: false
                        });
                        discovery.on('error', (err) => {
                            log.error('ssdp error', err);
                        });
                        await discovery.start();
                    }
                    log('Discovering gateway');
                    const clearable = pTimeout(first(discovery.discover(ST)), {
                        milliseconds: discoveryTimeout
                    });
                    clear = clearable.clear;
                    const result = await clearable;
                    if (result == null) {
                        throw new Error('Could not discover gateway');
                    }
                    log('Discovered gateway %s', result.location);
                    service = result;
                    expires = Date.now() + timeout;
                }
                return service;
            },
            cancel: async () => {
                if (discovery != null) {
                    await discovery.stop();
                }
                if (clear != null) {
                    clear();
                }
            }
        };
        return discover;
    };
}
//# sourceMappingURL=index.js.map