/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { type DeferredPromise } from 'p-defer';
import type { DiscoverGateway } from '../discovery/index.js';
import type { Client, MapPortOptions, UnmapPortOptions } from '../index.js';
import type { RemoteInfo } from 'dgram';
export interface PortMappingOptions {
    type?: 'tcp' | 'udp';
    ttl?: number;
    public?: boolean;
    private?: boolean;
    internal?: boolean;
    external?: boolean;
}
export declare class PMPClient extends EventEmitter implements Client {
    private readonly socket;
    private queue;
    private connecting;
    private listening;
    private req;
    private reqActive;
    private readonly discoverGateway;
    private gateway?;
    private cancelGatewayDiscovery?;
    static createClient(discoverGateway: () => DiscoverGateway): PMPClient;
    constructor(discoverGateway: () => DiscoverGateway);
    connect(): void;
    map(opts: MapPortOptions): Promise<void>;
    unmap(opts: UnmapPortOptions): Promise<void>;
    externalIp(): Promise<string>;
    close(): Promise<void>;
    /**
     * Queues a UDP request to be send to the gateway device.
     */
    request(op: number, obj: PortMappingOptions, deferred: DeferredPromise<any>): void;
    /**
     * Processes the next request if the socket is listening.
     */
    _next(): void;
    onListening(): void;
    onMessage(msg: Buffer, rinfo: RemoteInfo): void;
    onClose(): void;
    onError(err: Error): void;
}
//# sourceMappingURL=index.d.ts.map