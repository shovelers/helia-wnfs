/**
 * @packageDocumentation
 *
 * `@helia/unixfs` is an implementation of a {@link https://github.com/ipfs/specs/blob/main/UNIXFS.md UnixFS filesystem} compatible with {@link https://github.com/ipfs/helia Helia}.
 *
 * See the {@link UnixFS UnixFS interface} for all available operations.
 *
 * @example
 *
 * ```typescript
 * import { createHelia } from 'helia'
 * import { unixfs } from '@helia/unixfs'
 *
 * const helia = createHelia({
 *   // ... helia config
 * })
 * const fs = unixfs(helia)
 *
 * // create an empty dir and a file, then add the file to the dir
 * const emptyDirCid = await fs.addDirectory()
 * const fileCid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3]))
 * const updateDirCid = await fs.cp(fileCid, emptyDirCid, 'foo.txt')
 *
 * // or doing the same thing as a stream
 * for await (const entry of fs.addAll([{
 *   path: 'foo.txt',
 *   content: Uint8Array.from([0, 1, 2, 3])
 * }])) {
 *   console.info(entry)
 * }
 * ```
 *
 * @example
 *
 * Recursively adding a directory (Node.js-compatibly environments only):
 *
 * ```typescript
 * import { globSource } from '@helia/unixfs'
 *
 * for await (const entry of fs.addAll(globSource('path/to/containing/dir', 'glob-pattern'))) {
 *   console.info(entry)
 * }
 * ```
 */
import { addAll, addBytes, addByteStream, addDirectory, addFile } from './commands/add.js';
import { cat } from './commands/cat.js';
import { chmod } from './commands/chmod.js';
import { cp } from './commands/cp.js';
import { ls } from './commands/ls.js';
import { mkdir } from './commands/mkdir.js';
import { rm } from './commands/rm.js';
import { stat } from './commands/stat.js';
import { touch } from './commands/touch.js';
class DefaultUnixFS {
    components;
    constructor(components) {
        this.components = components;
    }
    async *addAll(source, options = {}) {
        yield* addAll(source, this.components.blockstore, options);
    }
    async addBytes(bytes, options = {}) {
        return addBytes(bytes, this.components.blockstore, options);
    }
    async addByteStream(bytes, options = {}) {
        return addByteStream(bytes, this.components.blockstore, options);
    }
    async addFile(file, options = {}) {
        return addFile(file, this.components.blockstore, options);
    }
    async addDirectory(dir = {}, options = {}) {
        return addDirectory(dir, this.components.blockstore, options);
    }
    async *cat(cid, options = {}) {
        yield* cat(cid, this.components.blockstore, options);
    }
    async chmod(cid, mode, options = {}) {
        return chmod(cid, mode, this.components.blockstore, options);
    }
    async cp(source, target, name, options = {}) {
        return cp(source, target, name, this.components.blockstore, options);
    }
    async *ls(cid, options = {}) {
        yield* ls(cid, this.components.blockstore, options);
    }
    async mkdir(cid, dirname, options = {}) {
        return mkdir(cid, dirname, this.components.blockstore, options);
    }
    async rm(cid, path, options = {}) {
        return rm(cid, path, this.components.blockstore, options);
    }
    async stat(cid, options = {}) {
        return stat(cid, this.components.blockstore, options);
    }
    async touch(cid, options = {}) {
        return touch(cid, this.components.blockstore, options);
    }
}
/**
 * Create a {@link UnixFS} instance for use with {@link https://github.com/ipfs/helia Helia}
 */
export function unixfs(helia) {
    return new DefaultUnixFS(helia);
}
export { globSource } from './utils/glob-source.js';
export { urlSource } from './utils/url-source.js';
//# sourceMappingURL=index.js.map