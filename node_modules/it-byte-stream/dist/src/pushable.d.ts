import { type RaceSignalOptions } from 'race-signal';
import { type AbortOptions } from './index.js';
export interface Pushable<T> extends AsyncGenerator<T, void, unknown> {
    /**
     * End the iterable after all values in the buffer (if any) have been yielded. If an
     * error is passed the buffer is cleared immediately and the next iteration will
     * throw the passed error
     */
    end(err?: Error, options?: AbortOptions & RaceSignalOptions): Promise<void>;
    /**
     * Push a value into the iterable. Values are yielded from the iterable in the order
     * they are pushed. Values not yet consumed from the iterable are buffered.
     */
    push(value: T, options?: AbortOptions & RaceSignalOptions): Promise<void>;
}
export declare function pushable<T>(): Pushable<T>;
//# sourceMappingURL=pushable.d.ts.map