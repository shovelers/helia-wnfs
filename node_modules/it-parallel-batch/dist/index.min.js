(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.ItParallelBatch = factory()}(typeof self !== 'undefined' ? self : this, function () {
"use strict";var ItParallelBatch=(()=>{var a=Object.defineProperty;var i=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.prototype.hasOwnProperty;var g=(l,t)=>{for(var n in t)a(l,n,{get:t[n],enumerable:!0})},s=(l,t,n,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of f(t))!u.call(l,r)&&r!==n&&a(l,r,{get:()=>t[r],enumerable:!(e=i(t,r))||e.enumerable});return l};var w=l=>s(a({},"__esModule",{value:!0}),l);var b={};g(b,{default:()=>c});function y(l){return l[Symbol.asyncIterator]!=null}function d(l,t=1){return t=Number(t),y(l)?async function*(){let n=[];if(t<1&&(t=1),t!==Math.round(t))throw new Error("Batch size must be an integer");for await(let e of l)for(n.push(e);n.length>=t;)yield n.slice(0,t),n=n.slice(t);for(;n.length>0;)yield n.slice(0,t),n=n.slice(t)}():function*(){let n=[];if(t<1&&(t=1),t!==Math.round(t))throw new Error("Batch size must be an integer");for(let e of l)for(n.push(e);n.length>=t;)yield n.slice(0,t),n=n.slice(t);for(;n.length>0;)yield n.slice(0,t),n=n.slice(t)}()}var h=d;async function*c(l,t=1){for await(let n of h(l,t)){let e=n.map(async r=>r().then(o=>({ok:!0,value:o}),o=>({ok:!1,err:o})));for(let r=0;r<e.length;r++){let o=await e[r];if(o.ok)yield o.value;else throw o.err}}}return w(b);})();
return ItParallelBatch}));
