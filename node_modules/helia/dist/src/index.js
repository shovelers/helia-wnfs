/**
 * @packageDocumentation
 *
 * Exports a `createHelia` function that returns an object that implements the {@link Helia} API.
 *
 * Pass it to other modules like {@link https://www.npmjs.com/package/@helia/unixfs | @helia/unixfs} to make files available on the distributed web.
 *
 * @example
 *
 * ```typescript
 * import { createHelia } from 'helia'
 * import { unixfs } from '@helia/unixfs'
 * import { CID } from 'multiformats/cid'
 *
 * const helia = await createHelia()
 *
 * const fs = unixfs(helia)
 * fs.cat(CID.parse('bafyFoo'))
 * ```
 */
import { logger } from '@libp2p/logger';
import { MemoryBlockstore } from 'blockstore-core';
import { MemoryDatastore } from 'datastore-core';
import { HeliaImpl } from './helia.js';
import { createLibp2p } from './utils/libp2p.js';
import { name, version } from './version.js';
// re-export interface types so people don't have to depend on @helia/interface
// if they don't want to
export * from '@helia/interface';
export * from '@helia/interface/blocks';
export * from '@helia/interface/pins';
const log = logger('helia');
export async function createHelia(init = {}) {
    const datastore = init.datastore ?? new MemoryDatastore();
    const blockstore = init.blockstore ?? new MemoryBlockstore();
    let libp2p;
    if (isLibp2p(init.libp2p)) {
        libp2p = init.libp2p;
    }
    else {
        libp2p = await createLibp2p(datastore, init.libp2p);
    }
    const helia = new HeliaImpl({
        ...init,
        datastore,
        blockstore,
        libp2p
    });
    if (init.start !== false) {
        await helia.start();
    }
    // add helia to agent version
    addHeliaToAgentVersion(helia);
    return helia;
}
function isLibp2p(obj) {
    if (obj == null) {
        return false;
    }
    // a non-exhaustive list of methods found on the libp2p object
    const funcs = ['dial', 'dialProtocol', 'hangUp', 'handle', 'unhandle', 'getMultiaddrs', 'getProtocols'];
    // if these are all functions it's probably a libp2p object
    return funcs.every(m => typeof obj[m] === 'function');
}
function addHeliaToAgentVersion(helia) {
    // add helia to agent version
    try {
        const existingAgentVersion = helia.libp2p.services.identify.host.agentVersion;
        if (existingAgentVersion.match(/js-libp2p\/\d+\.\d+\.\d+\sUserAgent=/) == null) {
            // the user changed the agent version
            return;
        }
        helia.libp2p.services.identify.host.agentVersion = `${name}/${version} ${helia.libp2p.services.identify.host.agentVersion}`;
    }
    catch (err) {
        log.error('could not add Helia to agent version', err);
    }
}
//# sourceMappingURL=index.js.map