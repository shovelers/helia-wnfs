import { createBitswap } from 'ipfs-bitswap';
class BitswapBlockBroker {
    bitswap;
    started;
    constructor(components, init = {}) {
        const { libp2p, blockstore, hashers } = components;
        this.bitswap = createBitswap(libp2p, blockstore, {
            hashLoader: {
                getHasher: async (codecOrName) => {
                    const hasher = hashers.find(hasher => {
                        return hasher.code === codecOrName || hasher.name === codecOrName;
                    });
                    if (hasher != null) {
                        return hasher;
                    }
                    throw new Error(`Could not load hasher for code/name "${codecOrName}"`);
                }
            },
            ...init
        });
        this.started = false;
    }
    isStarted() {
        return this.started;
    }
    async start() {
        await this.bitswap.start();
        this.started = true;
    }
    async stop() {
        await this.bitswap.stop();
        this.started = false;
    }
    announce(cid, block, options) {
        this.bitswap.notify(cid, block, options);
    }
    async retrieve(cid, { validateFn, ...options } = {}) {
        return this.bitswap.want(cid, options);
    }
}
/**
 * A helper factory for users who want to override Helia `blockBrokers` but
 * still want to use the default `BitswapBlockBroker`.
 */
export function bitswap(init = {}) {
    return (components) => new BitswapBlockBroker(components, init);
}
//# sourceMappingURL=bitswap.js.map