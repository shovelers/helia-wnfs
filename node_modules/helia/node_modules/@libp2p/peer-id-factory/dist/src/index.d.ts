/**
 * @packageDocumentation
 *
 * Generate, import, and export PeerIDs, for use with [IPFS](https://github.com/ipfs/ipfs).
 *
 * A Peer ID is the SHA-256 [multihash](https://github.com/multiformats/multihash) of a public key.
 *
 * The public key is a base64 encoded string of a protobuf containing an RSA DER buffer. This uses a node buffer to pass the base64 encoded public key protobuf to the multihash for ID generation.
 *
 * @example
 *
 * ```JavaScript
 * import { createEd25519PeerId } from '@libp2p/peer-id-factory'
 *
 * const peerId = await createEd25519PeerId()
 * console.log(id.toString())
 * ```
 *
 * ```bash
 * 12D3KooWRm8J3iL796zPFi2EtGGtUJn58AG67gcqzMFHZnnsTzqD
 * ```
 */
import type { PublicKey, PrivateKey } from '@libp2p/interface/keys';
import type { RSAPeerId, Ed25519PeerId, Secp256k1PeerId, PeerId } from '@libp2p/interface/peer-id';
export declare const createEd25519PeerId: () => Promise<Ed25519PeerId>;
export declare const createSecp256k1PeerId: () => Promise<Secp256k1PeerId>;
export declare const createRSAPeerId: (opts?: {
    bits: number;
}) => Promise<RSAPeerId>;
export declare function createFromPubKey(publicKey: PublicKey): Promise<PeerId>;
export declare function createFromPrivKey(privateKey: PrivateKey): Promise<PeerId>;
export declare function exportToProtobuf(peerId: RSAPeerId | Ed25519PeerId | Secp256k1PeerId, excludePrivateKey?: boolean): Uint8Array;
export declare function createFromProtobuf(buf: Uint8Array): Promise<PeerId>;
export declare function createFromJSON(obj: {
    id: string;
    privKey?: string;
    pubKey?: string;
}): Promise<PeerId>;
//# sourceMappingURL=index.d.ts.map