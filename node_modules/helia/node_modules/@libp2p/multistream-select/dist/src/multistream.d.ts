import { Uint8ArrayList } from 'uint8arraylist';
import type { MultistreamSelectInit } from '.';
import type { AbortOptions } from '@libp2p/interface';
import type { Pushable } from 'it-pushable';
import type { Reader } from 'it-reader';
export declare function encode(buffer: Uint8Array | Uint8ArrayList): Uint8ArrayList;
/**
 * `write` encodes and writes a single buffer
 */
export declare function write(writer: Pushable<any>, buffer: Uint8Array | Uint8ArrayList, options?: MultistreamSelectInit): void;
/**
 * `writeAll` behaves like `write`, except it encodes an array of items as a single write
 */
export declare function writeAll(writer: Pushable<any>, buffers: Uint8Array[], options?: MultistreamSelectInit): void;
export declare function read(reader: Reader, options?: AbortOptions): Promise<Uint8ArrayList>;
export declare function readString(reader: Reader, options?: AbortOptions): Promise<string>;
//# sourceMappingURL=multistream.d.ts.map