import { type Mortice } from 'mortice';
import type { PersistentPeerStoreComponents, PersistentPeerStoreInit } from './index.js';
import type { PeerUpdate as PeerUpdateExternal } from '@libp2p/interface';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { Peer, PeerData, PeerQuery } from '@libp2p/interface/peer-store';
/**
 * Event detail emitted when peer data changes
 */
export interface PeerUpdate extends PeerUpdateExternal {
    updated: boolean;
}
export declare class PersistentStore {
    #private;
    private readonly peerId;
    private readonly datastore;
    readonly lock: Mortice;
    private readonly addressFilter?;
    constructor(components: PersistentPeerStoreComponents, init?: PersistentPeerStoreInit);
    has(peerId: PeerId): Promise<boolean>;
    delete(peerId: PeerId): Promise<void>;
    load(peerId: PeerId): Promise<Peer>;
    save(peerId: PeerId, data: PeerData): Promise<PeerUpdate>;
    patch(peerId: PeerId, data: Partial<PeerData>): Promise<PeerUpdate>;
    merge(peerId: PeerId, data: PeerData): Promise<PeerUpdate>;
    all(query?: PeerQuery): AsyncGenerator<Peer, void, unknown>;
}
//# sourceMappingURL=store.d.ts.map