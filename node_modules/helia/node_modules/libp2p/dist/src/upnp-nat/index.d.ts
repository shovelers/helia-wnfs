import { type NatAPI } from '@achingbrain/nat-port-mapper';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { Startable } from '@libp2p/interface/startable';
import type { AddressManager } from '@libp2p/interface-internal/address-manager';
import type { TransportManager } from '@libp2p/interface-internal/transport-manager';
export interface PMPOptions {
    /**
     * Whether to enable PMP as well as UPnP
     */
    enabled?: boolean;
}
export interface UPnPNATInit {
    /**
     * Pass a value to use instead of auto-detection
     */
    externalAddress?: string;
    /**
     * Pass a value to use instead of auto-detection
     */
    localAddress?: string;
    /**
     * A string value to use for the port mapping description on the gateway
     */
    description?: string;
    /**
     * How long UPnP port mappings should last for in seconds (minimum 1200)
     */
    ttl?: number;
    /**
     * Whether to automatically refresh UPnP port mappings when their TTL is reached
     */
    keepAlive?: boolean;
    /**
     * Pass a value to use instead of auto-detection
     */
    gateway?: string;
}
export interface UPnPNATComponents {
    peerId: PeerId;
    transportManager: TransportManager;
    addressManager: AddressManager;
}
declare class UPnPNAT implements Startable {
    private readonly components;
    private readonly externalAddress?;
    private readonly localAddress?;
    private readonly description;
    private readonly ttl;
    private readonly keepAlive;
    private readonly gateway?;
    private started;
    private client?;
    constructor(components: UPnPNATComponents, init: UPnPNATInit);
    isStarted(): boolean;
    start(): void;
    /**
     * Attempt to use uPnP to configure port mapping using the current gateway.
     *
     * Run after start to ensure the transport manager has all addresses configured.
     */
    afterStart(): void;
    _start(): Promise<void>;
    _getClient(): NatAPI;
    /**
     * Stops the NAT manager
     */
    stop(): Promise<void>;
}
export declare function uPnPNATService(init?: UPnPNATInit): (components: UPnPNATComponents) => UPnPNAT;
export {};
//# sourceMappingURL=index.d.ts.map