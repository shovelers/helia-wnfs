import type { AbortOptions } from '@libp2p/interface';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { ConnectionManager } from '@libp2p/interface-internal/connection-manager';
import type { Registrar } from '@libp2p/interface-internal/registrar';
import type { Multiaddr } from '@multiformats/multiaddr';
export interface PingService {
    ping(peer: PeerId | Multiaddr | Multiaddr[], options?: AbortOptions): Promise<number>;
}
export interface PingServiceInit {
    protocolPrefix?: string;
    maxInboundStreams?: number;
    maxOutboundStreams?: number;
    runOnTransientConnection?: boolean;
    /**
     * How long we should wait for a ping response
     */
    timeout?: number;
}
export interface PingServiceComponents {
    registrar: Registrar;
    connectionManager: ConnectionManager;
}
export declare function pingService(init?: PingServiceInit): (components: PingServiceComponents) => PingService;
//# sourceMappingURL=index.d.ts.map