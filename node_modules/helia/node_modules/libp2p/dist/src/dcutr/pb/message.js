/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';
export var HolePunch;
(function (HolePunch) {
    let Type;
    (function (Type) {
        Type["UNUSED"] = "UNUSED";
        Type["CONNECT"] = "CONNECT";
        Type["SYNC"] = "SYNC";
    })(Type = HolePunch.Type || (HolePunch.Type = {}));
    let __TypeValues;
    (function (__TypeValues) {
        __TypeValues[__TypeValues["UNUSED"] = 0] = "UNUSED";
        __TypeValues[__TypeValues["CONNECT"] = 100] = "CONNECT";
        __TypeValues[__TypeValues["SYNC"] = 300] = "SYNC";
    })(__TypeValues || (__TypeValues = {}));
    (function (Type) {
        Type.codec = () => {
            return enumeration(__TypeValues);
        };
    })(Type = HolePunch.Type || (HolePunch.Type = {}));
    let _codec;
    HolePunch.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.type != null) {
                    w.uint32(8);
                    HolePunch.Type.codec().encode(obj.type, w);
                }
                if (obj.observedAddresses != null) {
                    for (const value of obj.observedAddresses) {
                        w.uint32(18);
                        w.bytes(value);
                    }
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    observedAddresses: []
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.type = HolePunch.Type.codec().decode(reader);
                            break;
                        case 2:
                            obj.observedAddresses.push(reader.bytes());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    HolePunch.encode = (obj) => {
        return encodeMessage(obj, HolePunch.codec());
    };
    HolePunch.decode = (buf) => {
        return decodeMessage(buf, HolePunch.codec());
    };
})(HolePunch || (HolePunch = {}));
//# sourceMappingURL=message.js.map