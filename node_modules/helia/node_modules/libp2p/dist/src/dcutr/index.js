/**
 * @packageDocumentation
 *
 * Direct Connection Upgrade through Relay (DCUtR) is a protocol that allows two
 * nodes to connect to each other who would otherwise be prevented doing so due
 * to being behind NATed connections or firewalls.
 *
 * The protocol involves making a relayed connection between the two peers and
 * using the relay to synchronise connection timings so that they dial each other
 * at precisely the same moment.
 *
 * @example
 *
 * ```ts
 * import { createLibp2p } from 'libp2p'
 * import { circuitRelayTransport } from 'libp2p/circuit-relay'
 * import { tcp } from '@libp2p/tcp'
 * import { identifyService } from 'libp2p/identify'
 * import { dCUtRService } from 'libp2p/dcutr'
 *
 * const node = await createLibp2p({
 *   transports: [
 *     circuitRelayTransport(),
 *     tcp()
 *   ],
 *   services: {
 *     identify: identifyService(),
 *     dcutr: dcutrService()
 *   }
 * })
 *
 * // QmTarget is a peer that is behind a NAT, supports TCP and has a relay
 * // reservation
 * await node.dial('/ip4/.../p2p/QmRelay/p2p-circuit/p2p/QmTarget')
 *
 * // after a while the connection should automatically get upgraded to a
 * // direct connection (e.g. non-transient)
 * while (true) {
 *   const connections = node.getConnections()
 *
 *   if (connections.find(conn => conn.transient === false)) {
 *     console.info('have direct connection')
 *     break
 *   } else {
 *     console.info('have relayed connection')
 *
 *     // wait a few seconds to see if it's succeeded yet
 *     await new Promise((resolve) => {
 *       setTimeout(() => resolve(), 5000)
 *     })
 *   }
 * }
 * ```
 */
import { DefaultDCUtRService } from './dcutr.js';
/**
 * The DCUtR protocol
 */
export const multicodec = '/libp2p/dcutr';
export function dcutrService(init = {}) {
    return (components) => new DefaultDCUtRService(components, init);
}
//# sourceMappingURL=index.js.map