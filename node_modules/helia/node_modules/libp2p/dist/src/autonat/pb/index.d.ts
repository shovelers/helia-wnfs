import type { Codec } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export interface Message {
    type?: Message.MessageType;
    dial?: Message.Dial;
    dialResponse?: Message.DialResponse;
}
export declare namespace Message {
    enum MessageType {
        DIAL = "DIAL",
        DIAL_RESPONSE = "DIAL_RESPONSE"
    }
    namespace MessageType {
        const codec: () => Codec<MessageType>;
    }
    enum ResponseStatus {
        OK = "OK",
        E_DIAL_ERROR = "E_DIAL_ERROR",
        E_DIAL_REFUSED = "E_DIAL_REFUSED",
        E_BAD_REQUEST = "E_BAD_REQUEST",
        E_INTERNAL_ERROR = "E_INTERNAL_ERROR"
    }
    namespace ResponseStatus {
        const codec: () => Codec<ResponseStatus>;
    }
    interface PeerInfo {
        id?: Uint8Array;
        addrs: Uint8Array[];
    }
    namespace PeerInfo {
        const codec: () => Codec<PeerInfo>;
        const encode: (obj: Partial<PeerInfo>) => Uint8Array;
        const decode: (buf: Uint8Array | Uint8ArrayList) => PeerInfo;
    }
    interface Dial {
        peer?: Message.PeerInfo;
    }
    namespace Dial {
        const codec: () => Codec<Dial>;
        const encode: (obj: Partial<Dial>) => Uint8Array;
        const decode: (buf: Uint8Array | Uint8ArrayList) => Dial;
    }
    interface DialResponse {
        status?: Message.ResponseStatus;
        statusText?: string;
        addr?: Uint8Array;
    }
    namespace DialResponse {
        const codec: () => Codec<DialResponse>;
        const encode: (obj: Partial<DialResponse>) => Uint8Array;
        const decode: (buf: Uint8Array | Uint8ArrayList) => DialResponse;
    }
    const codec: () => Codec<Message>;
    const encode: (obj: Partial<Message>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Message;
}
//# sourceMappingURL=index.d.ts.map