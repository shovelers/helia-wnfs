/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { encodeMessage, decodeMessage, message, enumeration } from 'protons-runtime';
export var FetchRequest;
(function (FetchRequest) {
    let _codec;
    FetchRequest.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if ((obj.identifier != null && obj.identifier !== '')) {
                    w.uint32(10);
                    w.string(obj.identifier);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    identifier: ''
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.identifier = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    FetchRequest.encode = (obj) => {
        return encodeMessage(obj, FetchRequest.codec());
    };
    FetchRequest.decode = (buf) => {
        return decodeMessage(buf, FetchRequest.codec());
    };
})(FetchRequest || (FetchRequest = {}));
export var FetchResponse;
(function (FetchResponse) {
    let StatusCode;
    (function (StatusCode) {
        StatusCode["OK"] = "OK";
        StatusCode["NOT_FOUND"] = "NOT_FOUND";
        StatusCode["ERROR"] = "ERROR";
    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));
    let __StatusCodeValues;
    (function (__StatusCodeValues) {
        __StatusCodeValues[__StatusCodeValues["OK"] = 0] = "OK";
        __StatusCodeValues[__StatusCodeValues["NOT_FOUND"] = 1] = "NOT_FOUND";
        __StatusCodeValues[__StatusCodeValues["ERROR"] = 2] = "ERROR";
    })(__StatusCodeValues || (__StatusCodeValues = {}));
    (function (StatusCode) {
        StatusCode.codec = () => {
            return enumeration(__StatusCodeValues);
        };
    })(StatusCode = FetchResponse.StatusCode || (FetchResponse.StatusCode = {}));
    let _codec;
    FetchResponse.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.status != null && __StatusCodeValues[obj.status] !== 0) {
                    w.uint32(8);
                    FetchResponse.StatusCode.codec().encode(obj.status, w);
                }
                if ((obj.data != null && obj.data.byteLength > 0)) {
                    w.uint32(18);
                    w.bytes(obj.data);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {
                    status: StatusCode.OK,
                    data: new Uint8Array(0)
                };
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.status = FetchResponse.StatusCode.codec().decode(reader);
                            break;
                        case 2:
                            obj.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    FetchResponse.encode = (obj) => {
        return encodeMessage(obj, FetchResponse.codec());
    };
    FetchResponse.decode = (buf) => {
        return decodeMessage(buf, FetchResponse.codec());
    };
})(FetchResponse || (FetchResponse = {}));
//# sourceMappingURL=proto.js.map