import type { AbortOptions } from '@libp2p/interface';
import type { Stream } from '@libp2p/interface/connection';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { ConnectionManager } from '@libp2p/interface-internal/connection-manager';
import type { Registrar } from '@libp2p/interface-internal/registrar';
export interface FetchServiceInit {
    protocolPrefix?: string;
    maxInboundStreams?: number;
    maxOutboundStreams?: number;
    /**
     * How long we should wait for a remote peer to send any data
     */
    timeout?: number;
}
export interface HandleMessageOptions {
    stream: Stream;
    protocol: string;
}
export interface LookupFunction {
    (key: string): Promise<Uint8Array | null>;
}
export interface FetchServiceComponents {
    registrar: Registrar;
    connectionManager: ConnectionManager;
}
export interface FetchService {
    /**
     * The protocol name used by this fetch service
     */
    protocol: string;
    /**
     * Sends a request to fetch the value associated with the given key from the given peer
     */
    fetch(peer: PeerId, key: string, options?: AbortOptions): Promise<Uint8Array | null>;
    /**
     * Registers a new lookup callback that can map keys to values, for a given set of keys that
     * share the same prefix
     *
     * @example
     *
     * ```js
     * // ...
     * libp2p.fetchService.registerLookupFunction('/prefix', (key) => { ... })
     * ```
     */
    registerLookupFunction(prefix: string, lookup: LookupFunction): void;
    /**
     * Registers a new lookup callback that can map keys to values, for a given set of keys that
     * share the same prefix.
     *
     * @example
     *
     * ```js
     * // ...
     * libp2p.fetchService.unregisterLookupFunction('/prefix')
     * ```
     */
    unregisterLookupFunction(prefix: string, lookup?: LookupFunction): void;
}
export declare function fetchService(init?: FetchServiceInit): (components: FetchServiceComponents) => FetchService;
//# sourceMappingURL=index.d.ts.map