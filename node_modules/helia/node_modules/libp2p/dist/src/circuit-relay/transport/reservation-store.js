import { TypedEventEmitter } from '@libp2p/interface/events';
import { logger } from '@libp2p/logger';
import { PeerMap } from '@libp2p/peer-collections';
import { multiaddr } from '@multiformats/multiaddr';
import { pbStream } from 'it-protobuf-stream';
import { PeerJobQueue } from '../../utils/peer-job-queue.js';
import { DEFAULT_RESERVATION_CONCURRENCY, RELAY_TAG, RELAY_V2_HOP_CODEC } from '../constants.js';
import { HopMessage, Status } from '../pb/index.js';
import { getExpirationMilliseconds } from '../utils.js';
const log = logger('libp2p:circuit-relay:transport:reservation-store');
// allow refreshing a relay reservation if it will expire in the next 10 minutes
const REFRESH_WINDOW = (60 * 1000) * 10;
// try to refresh relay reservations 5 minutes before expiry
const REFRESH_TIMEOUT = (60 * 1000) * 5;
// minimum duration before which a reservation must not be refreshed
const REFRESH_TIMEOUT_MIN = 30 * 1000;
export class ReservationStore extends TypedEventEmitter {
    peerId;
    connectionManager;
    transportManager;
    peerStore;
    events;
    reserveQueue;
    reservations;
    maxDiscoveredRelays;
    maxReservationQueueLength;
    reservationCompletionTimeout;
    started;
    constructor(components, init) {
        super();
        this.peerId = components.peerId;
        this.connectionManager = components.connectionManager;
        this.transportManager = components.transportManager;
        this.peerStore = components.peerStore;
        this.events = components.events;
        this.reservations = new PeerMap();
        this.maxDiscoveredRelays = init?.discoverRelays ?? 0;
        this.maxReservationQueueLength = init?.maxReservationQueueLength ?? 100;
        this.reservationCompletionTimeout = init?.reservationCompletionTimeout ?? 10000;
        this.started = false;
        // ensure we don't listen on multiple relays simultaneously
        this.reserveQueue = new PeerJobQueue({
            concurrency: init?.reservationConcurrency ?? DEFAULT_RESERVATION_CONCURRENCY
        });
        // When a peer disconnects, if we had a reservation on that peer
        // remove the reservation and multiaddr and maybe trigger search
        // for new relays
        this.events.addEventListener('peer:disconnect', (evt) => {
            this.#removeRelay(evt.detail);
        });
    }
    isStarted() {
        return this.started;
    }
    async start() {
        this.started = true;
    }
    async stop() {
        this.reserveQueue.clear();
        this.reservations.forEach(({ timeout }) => {
            clearTimeout(timeout);
        });
        this.reservations.clear();
        this.started = false;
    }
    /**
     * If the number of current relays is beneath the configured `maxReservations`
     * value, and the passed peer id is not our own, and we have a non-relayed connection
     * to the remote, and the remote peer speaks the hop protocol, try to reserve a slot
     * on the remote peer
     */
    async addRelay(peerId, type) {
        if (this.peerId.equals(peerId)) {
            log('not trying to use self as relay');
            return;
        }
        if (this.reserveQueue.size > this.maxReservationQueueLength) {
            log('not adding relay as the queue is full');
            return;
        }
        if (this.reserveQueue.hasJob(peerId)) {
            log('relay peer is already in the reservation queue');
            return;
        }
        log('add relay %p', peerId);
        await this.reserveQueue.add(async () => {
            try {
                // allow refresh of an existing reservation if it is about to expire
                const existingReservation = this.reservations.get(peerId);
                if (existingReservation != null) {
                    if (getExpirationMilliseconds(existingReservation.reservation.expire) > REFRESH_WINDOW) {
                        log('already have reservation on relay peer %p and it expires in more than 10 minutes', peerId);
                        return;
                    }
                    clearTimeout(existingReservation.timeout);
                    this.reservations.delete(peerId);
                }
                if (type === 'discovered' && [...this.reservations.values()].reduce((acc, curr) => {
                    if (curr.type === 'discovered') {
                        acc++;
                    }
                    return acc;
                }, 0) >= this.maxDiscoveredRelays) {
                    log('already have enough discovered relays');
                    return;
                }
                const signal = AbortSignal.timeout(this.reservationCompletionTimeout);
                const connection = await this.connectionManager.openConnection(peerId, {
                    signal
                });
                if (connection.remoteAddr.protoNames().includes('p2p-circuit')) {
                    log('not creating reservation over relayed connection');
                    return;
                }
                const reservation = await this.#createReservation(connection, {
                    signal
                });
                log('created reservation on relay peer %p', peerId);
                const expiration = getExpirationMilliseconds(reservation.expire);
                // sets a lower bound on the timeout, and also don't let it go over
                // 2^31 - 1 (setTimeout will only accept signed 32 bit integers)
                const timeoutDuration = Math.min(Math.max(expiration - REFRESH_TIMEOUT, REFRESH_TIMEOUT_MIN), Math.pow(2, 31) - 1);
                const timeout = setTimeout(() => {
                    this.addRelay(peerId, type).catch(err => {
                        log.error('could not refresh reservation to relay %p', peerId, err);
                    });
                }, timeoutDuration);
                // we've managed to create a reservation successfully
                this.reservations.set(peerId, {
                    timeout,
                    reservation,
                    type
                });
                // ensure we don't close the connection to the relay
                await this.peerStore.merge(peerId, {
                    tags: {
                        [RELAY_TAG]: {
                            value: 1,
                            ttl: expiration
                        }
                    }
                });
                // listen on multiaddr that only the circuit transport is listening for
                await this.transportManager.listen([multiaddr(`/p2p/${peerId.toString()}/p2p-circuit`)]);
            }
            catch (err) {
                log.error('could not reserve slot on %p', peerId, err);
                // cancel the renewal timeout if it's been set
                const reservation = this.reservations.get(peerId);
                if (reservation != null) {
                    clearTimeout(reservation.timeout);
                }
                // if listening failed, remove the reservation
                this.reservations.delete(peerId);
            }
        }, {
            peerId
        });
    }
    hasReservation(peerId) {
        return this.reservations.has(peerId);
    }
    getReservation(peerId) {
        return this.reservations.get(peerId)?.reservation;
    }
    async #createReservation(connection, options) {
        options.signal?.throwIfAborted();
        log('requesting reservation from %p', connection.remotePeer);
        const stream = await connection.newStream(RELAY_V2_HOP_CODEC, options);
        const pbstr = pbStream(stream);
        const hopstr = pbstr.pb(HopMessage);
        await hopstr.write({ type: HopMessage.Type.RESERVE }, options);
        let response;
        try {
            response = await hopstr.read(options);
        }
        catch (err) {
            log.error('error parsing reserve message response from %p because', connection.remotePeer, err);
            throw err;
        }
        finally {
            await stream.close();
        }
        if (response.status === Status.OK && (response.reservation != null)) {
            return response.reservation;
        }
        const errMsg = `reservation failed with status ${response.status ?? 'undefined'}`;
        log.error(errMsg);
        throw new Error(errMsg);
    }
    /**
     * Remove listen relay
     */
    #removeRelay(peerId) {
        const existingReservation = this.reservations.get(peerId);
        if (existingReservation == null) {
            return;
        }
        log('connection to relay %p closed, removing reservation from local store', peerId);
        clearTimeout(existingReservation.timeout);
        this.reservations.delete(peerId);
        this.safeDispatchEvent('relay:removed', { detail: peerId });
        if (this.reservations.size < this.maxDiscoveredRelays) {
            log('not enough relays %d/%d', this.reservations.size, this.maxDiscoveredRelays);
            this.safeDispatchEvent('relay:not-enough-relays', {});
        }
    }
}
//# sourceMappingURL=reservation-store.js.map