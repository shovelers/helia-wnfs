import { TypedEventEmitter } from '@libp2p/interface/events';
import type { ContentRouting } from '@libp2p/interface/content-routing';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { PeerStore } from '@libp2p/interface/peer-store';
import type { Startable } from '@libp2p/interface/startable';
import type { ConnectionManager } from '@libp2p/interface-internal/connection-manager';
import type { Registrar } from '@libp2p/interface-internal/registrar';
import type { TransportManager } from '@libp2p/interface-internal/transport-manager';
export interface RelayDiscoveryEvents {
    'relay:discover': CustomEvent<PeerId>;
}
export interface RelayDiscoveryComponents {
    peerId: PeerId;
    peerStore: PeerStore;
    connectionManager: ConnectionManager;
    transportManager: TransportManager;
    contentRouting: ContentRouting;
    registrar: Registrar;
}
/**
 * ReservationManager automatically makes a circuit v2 reservation on any connected
 * peers that support the circuit v2 HOP protocol.
 */
export declare class RelayDiscovery extends TypedEventEmitter<RelayDiscoveryEvents> implements Startable {
    private readonly peerId;
    private readonly peerStore;
    private readonly contentRouting;
    private readonly registrar;
    private started;
    private topologyId?;
    constructor(components: RelayDiscoveryComponents);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): void;
    /**
     * Try to listen on available hop relay connections.
     * The following order will happen while we do not have enough relays:
     *
     * 1. Check the metadata store for known relays, try to listen on the ones we are already connected
     * 2. Dial and try to listen on the peers we know that support hop but are not connected
     * 3. Search the network
     */
    discover(): Promise<void>;
}
//# sourceMappingURL=discovery.d.ts.map