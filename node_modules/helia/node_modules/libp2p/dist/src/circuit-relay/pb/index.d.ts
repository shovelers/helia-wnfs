import type { Codec } from 'protons-runtime';
import type { Uint8ArrayList } from 'uint8arraylist';
export interface HopMessage {
    type?: HopMessage.Type;
    peer?: Peer;
    reservation?: Reservation;
    limit?: Limit;
    status?: Status;
}
export declare namespace HopMessage {
    enum Type {
        RESERVE = "RESERVE",
        CONNECT = "CONNECT",
        STATUS = "STATUS"
    }
    namespace Type {
        const codec: () => Codec<Type>;
    }
    const codec: () => Codec<HopMessage>;
    const encode: (obj: Partial<HopMessage>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => HopMessage;
}
export interface StopMessage {
    type?: StopMessage.Type;
    peer?: Peer;
    limit?: Limit;
    status?: Status;
}
export declare namespace StopMessage {
    enum Type {
        CONNECT = "CONNECT",
        STATUS = "STATUS"
    }
    namespace Type {
        const codec: () => Codec<Type>;
    }
    const codec: () => Codec<StopMessage>;
    const encode: (obj: Partial<StopMessage>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => StopMessage;
}
export interface Peer {
    id: Uint8Array;
    addrs: Uint8Array[];
}
export declare namespace Peer {
    const codec: () => Codec<Peer>;
    const encode: (obj: Partial<Peer>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Peer;
}
export interface Reservation {
    expire: bigint;
    addrs: Uint8Array[];
    voucher?: Uint8Array;
}
export declare namespace Reservation {
    const codec: () => Codec<Reservation>;
    const encode: (obj: Partial<Reservation>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Reservation;
}
export interface Limit {
    duration?: number;
    data?: bigint;
}
export declare namespace Limit {
    const codec: () => Codec<Limit>;
    const encode: (obj: Partial<Limit>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => Limit;
}
export declare enum Status {
    UNUSED = "UNUSED",
    OK = "OK",
    RESERVATION_REFUSED = "RESERVATION_REFUSED",
    RESOURCE_LIMIT_EXCEEDED = "RESOURCE_LIMIT_EXCEEDED",
    PERMISSION_DENIED = "PERMISSION_DENIED",
    CONNECTION_FAILED = "CONNECTION_FAILED",
    NO_RESERVATION = "NO_RESERVATION",
    MALFORMED_MESSAGE = "MALFORMED_MESSAGE",
    UNEXPECTED_MESSAGE = "UNEXPECTED_MESSAGE"
}
export declare namespace Status {
    const codec: () => Codec<Status>;
}
export interface ReservationVoucher {
    relay: Uint8Array;
    peer: Uint8Array;
    expiration: bigint;
}
export declare namespace ReservationVoucher {
    const codec: () => Codec<ReservationVoucher>;
    const encode: (obj: Partial<ReservationVoucher>) => Uint8Array;
    const decode: (buf: Uint8Array | Uint8ArrayList) => ReservationVoucher;
}
//# sourceMappingURL=index.d.ts.map