import { TypedEventEmitter } from '@libp2p/interface/events';
import { logger } from '@libp2p/logger';
import pRetry from 'p-retry';
import { codes } from '../../errors.js';
import { DEFAULT_ADVERT_BOOT_DELAY, RELAY_RENDEZVOUS_NS } from '../constants.js';
import { namespaceToCid } from '../utils.js';
const log = logger('libp2p:circuit-relay:advert-service');
export class AdvertService extends TypedEventEmitter {
    contentRouting;
    timeout;
    started;
    bootDelay;
    /**
     * Creates an instance of Relay
     */
    constructor(components, init) {
        super();
        this.contentRouting = components.contentRouting;
        this.bootDelay = init?.bootDelay ?? DEFAULT_ADVERT_BOOT_DELAY;
        this.started = false;
    }
    isStarted() {
        return this.started;
    }
    /**
     * Start Relay service
     */
    start() {
        if (this.started) {
            return;
        }
        // Advertise service if HOP enabled and advertising enabled
        this.timeout = setTimeout(() => {
            this._advertiseService().catch(err => {
                log.error('could not advertise service', err);
            });
        }, this.bootDelay);
        this.started = true;
    }
    /**
     * Stop Relay service
     */
    stop() {
        try {
            clearTimeout(this.timeout);
        }
        catch (err) { }
        this.started = false;
    }
    /**
     * Advertise hop relay service in the network.
     */
    async _advertiseService() {
        await pRetry(async () => {
            try {
                const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);
                await this.contentRouting.provide(cid);
                this.safeDispatchEvent('advert:success', { detail: undefined });
            }
            catch (err) {
                this.safeDispatchEvent('advert:error', { detail: err });
                if (err.code === codes.ERR_NO_ROUTERS_AVAILABLE) {
                    log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err);
                    this.stop();
                    return;
                }
                log.error('could not advertise service', err);
                throw err;
            }
        });
    }
}
//# sourceMappingURL=advert-service.js.map