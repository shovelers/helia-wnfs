import { type ProtobufStream } from 'it-protobuf-stream';
import { HopMessage, StopMessage } from '../pb/index.js';
import { type AdvertServiceComponents, type AdvertServiceInit } from './advert-service.js';
import { type ReservationStoreInit } from './reservation-store.js';
import type { CircuitRelayService, RelayReservation } from '../index.js';
import type { Connection, Stream } from '@libp2p/interface/connection';
import type { ConnectionGater } from '@libp2p/interface/connection-gater';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { PeerStore } from '@libp2p/interface/peer-store';
import type { AddressManager } from '@libp2p/interface-internal/address-manager';
import type { ConnectionManager } from '@libp2p/interface-internal/connection-manager';
import type { Registrar } from '@libp2p/interface-internal/registrar';
export interface CircuitRelayServerInit {
    /**
     * Incoming hop requests must complete within this time in ms otherwise
     * the stream will be reset (default: 30s)
     */
    hopTimeout?: number;
    /**
     * If true, advertise this service via libp2p content routing to allow
     * peers to locate us on the network (default: false)
     */
    advertise?: boolean | AdvertServiceInit;
    /**
     * Configuration of reservations
     */
    reservations?: ReservationStoreInit;
    /**
     * The maximum number of simultaneous HOP inbound streams that can be open at once
     */
    maxInboundHopStreams?: number;
    /**
     * The maximum number of simultaneous HOP outbound streams that can be open at once
     */
    maxOutboundHopStreams?: number;
    /**
     * The maximum number of simultaneous STOP outbound streams that can be open at
     * once. (default: 300)
     */
    maxOutboundStopStreams?: number;
}
export interface HopProtocolOptions {
    connection: Connection;
    request: HopMessage;
    stream: ProtobufStream<Stream>;
}
export interface StopOptions {
    connection: Connection;
    request: StopMessage;
}
export interface CircuitRelayServerComponents extends AdvertServiceComponents {
    registrar: Registrar;
    peerStore: PeerStore;
    addressManager: AddressManager;
    peerId: PeerId;
    connectionManager: ConnectionManager;
    connectionGater: ConnectionGater;
}
export interface RelayServerEvents {
    'relay:reservation': CustomEvent<RelayReservation>;
    'relay:advert:success': CustomEvent<unknown>;
    'relay:advert:error': CustomEvent<Error>;
}
export declare function circuitRelayServer(init?: CircuitRelayServerInit): (components: CircuitRelayServerComponents) => CircuitRelayService;
//# sourceMappingURL=index.d.ts.map