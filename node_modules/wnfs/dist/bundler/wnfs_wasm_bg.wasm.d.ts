/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_foreignblockstore_free(a: number): void;
export function __wbg_accesskey_free(a: number): void;
export function accesskey_getLabel(a: number, b: number): void;
export function accesskey_getTemporalKey(a: number, b: number): void;
export function accesskey_getSnapshotKey(a: number, b: number): void;
export function accesskey_getContentCid(a: number, b: number): void;
export function accesskey_toBytes(a: number, b: number): void;
export function accesskey_fromBytes(a: number, b: number): number;
export function __wbg_privatedirectory_free(a: number): void;
export function privatedirectory_new(a: number, b: number, c: number, d: number): void;
export function privatedirectory_newAndStore(a: number, b: number, c: number, d: number, e: number): number;
export function privatedirectory_store(a: number, b: number, c: number, d: number, e: number): void;
export function privatedirectory_getNode(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function privatedirectory_lookupNode(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function privatedirectory_read(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function privatedirectory_ls(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function privatedirectory_rm(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function privatedirectory_write(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function privatedirectory_basicMv(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function privatedirectory_cp(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function privatedirectory_mkdir(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function privatedirectory_metadata(a: number, b: number): void;
export function privatedirectory_asNode(a: number): number;
export function privatedirectory_getId(a: number, b: number): void;
export function __wbg_privatefile_free(a: number): void;
export function privatefile_new(a: number, b: number, c: number, d: number): void;
export function privatefile_withContent(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function privatefile_store(a: number, b: number, c: number, d: number, e: number): void;
export function privatefile_getContent(a: number, b: number, c: number, d: number): void;
export function privatefile_metadata(a: number, b: number): void;
export function privatefile_getId(a: number, b: number): void;
export function privatefile_asNode(a: number): number;
export function __wbg_privateforest_free(a: number): void;
export function privateforest_new(a: number, b: number, c: number, d: number): void;
export function privateforest_load(a: number, b: number, c: number, d: number): void;
export function privateforest_store(a: number, b: number, c: number): void;
export function privateforest_merge(a: number, b: number, c: number, d: number): void;
export function privateforest_diff(a: number, b: number, c: number, d: number): void;
export function privateforest_emptyName(a: number): number;
export function __wbg_name_free(a: number): void;
export function __wbg_nameaccumulator_free(a: number): void;
export function name_new(a: number): number;
export function name_toNameAccumulator(a: number, b: number): number;
export function nameaccumulator_fromBytes(a: number, b: number, c: number): void;
export function nameaccumulator_toBytes(a: number, b: number): void;
export function __wbg_privatenode_free(a: number): void;
export function __wbg_forestchange_free(a: number): void;
export function privatenode_store(a: number, b: number, c: number, d: number, e: number): void;
export function privatenode_load(a: number, b: number, c: number, d: number, e: number): void;
export function privatenode_searchLatest(a: number, b: number, c: number, d: number): void;
export function privatenode_asDir(a: number, b: number): void;
export function privatenode_asFile(a: number, b: number): void;
export function privatenode_isDir(a: number): number;
export function privatenode_isFile(a: number): number;
export function privatenode_getId(a: number, b: number): void;
export function forestchange_getChangeType(a: number, b: number): void;
export function forestchange_getKey(a: number): number;
export function forestchange_getValue1(a: number, b: number): void;
export function forestchange_getValue2(a: number, b: number): void;
export function share(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function createShareName(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function findLatestShareCounter(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function receiveShare(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_publicdirectory_free(a: number): void;
export function publicdirectory_new(a: number): number;
export function publicdirectory_getNode(a: number, b: number, c: number, d: number): void;
export function publicdirectory_lookupNode(a: number, b: number, c: number, d: number, e: number): void;
export function publicdirectory_store(a: number, b: number, c: number): void;
export function publicdirectory_load(a: number, b: number, c: number, d: number): void;
export function publicdirectory_read(a: number, b: number, c: number, d: number): void;
export function publicdirectory_ls(a: number, b: number, c: number, d: number): void;
export function publicdirectory_rm(a: number, b: number, c: number, d: number): void;
export function publicdirectory_write(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function publicdirectory_basicMv(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function publicdirectory_cp(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function publicdirectory_mkdir(a: number, b: number, c: number, d: number, e: number): void;
export function publicdirectory_previousCids(a: number, b: number): void;
export function publicdirectory_metadata(a: number, b: number): void;
export function publicdirectory_asNode(a: number): number;
export function publicdirectory_getId(a: number, b: number): void;
export function __wbg_publicfile_free(a: number): void;
export function publicfile_new(a: number): number;
export function publicfile_getId(a: number, b: number): void;
export function publicfile_store(a: number, b: number, c: number): void;
export function publicfile_load(a: number, b: number, c: number, d: number): void;
export function publicfile_previousCids(a: number, b: number): void;
export function publicfile_metadata(a: number, b: number): void;
export function publicfile_readAt(a: number, b: number, c: number, d: number, e: number): void;
export function publicfile_setContent(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function publicfile_asNode(a: number): number;
export function __wbg_publicnode_free(a: number): void;
export function publicnode_asDir(a: number, b: number): void;
export function publicnode_asFile(a: number, b: number): void;
export function publicnode_isDir(a: number): number;
export function publicnode_isFile(a: number): number;
export function publicnode_getId(a: number, b: number): void;
export function setPanicHook(): void;
export function __wbg_foreignprivatekey_free(a: number): void;
export function __wbg_foreignexchangekey_free(a: number): void;
export function __wbindgen_export_0(a: number, b: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_export_4(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_export_5(a: number): void;
export function __wbindgen_export_6(a: number, b: number, c: number, d: number): void;
