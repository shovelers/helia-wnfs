let wasm;
export function __wbg_set_wasm(val) {
    wasm = val;
}


const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachedUint8Memory0 = null;

function getUint8Memory0() {
    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(128).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 132) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachedInt32Memory0 = null;

function getInt32Memory0() {
    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

const CLOSURE_DTORS = new FinalizationRegistry(state => {
    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)
});

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);
                CLOSURE_DTORS.unregister(state)
            } else {
                state.a = a;
            }
        }
    };
    real.original = state;
    CLOSURE_DTORS.register(real, state, state);
    return real;
}
function __wbg_adapter_30(arg0, arg1, arg2) {
    wasm.__wbindgen_export_3(arg0, arg1, addHeapObject(arg2));
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1, 1) >>> 0;
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let stack_pointer = 128;

function addBorrowedObject(obj) {
    if (stack_pointer == 1) throw new Error('out of js stack');
    heap[--stack_pointer] = obj;
    return stack_pointer;
}

let cachedUint32Memory0 = null;

function getUint32Memory0() {
    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {
        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachedUint32Memory0;
}

function getArrayJsValueFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    const mem = getUint32Memory0();
    const slice = mem.subarray(ptr / 4, ptr / 4 + len);
    const result = [];
    for (let i = 0; i < slice.length; i++) {
        result.push(takeObject(slice[i]));
    }
    return result;
}
/**
* @param {AccessKey} access_key
* @param {number} share_count
* @param {string} sharer_root_did
* @param {Uint8Array} recipient_exchange_root
* @param {PrivateForest} forest
* @param {BlockStore} store
* @returns {Promise<any>}
*/
export function share(access_key, share_count, sharer_root_did, recipient_exchange_root, forest, store) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(access_key, AccessKey);
        var ptr0 = access_key.__destroy_into_raw();
        const ptr1 = passStringToWasm0(sharer_root_did, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        const ptr2 = passArray8ToWasm0(recipient_exchange_root, wasm.__wbindgen_export_0);
        const len2 = WASM_VECTOR_LEN;
        _assertClass(forest, PrivateForest);
        wasm.share(retptr, ptr0, share_count, ptr1, len1, ptr2, len2, forest.__wbg_ptr, addHeapObject(store));
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return takeObject(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* @param {number} share_count
* @param {string} sharer_root_did
* @param {Uint8Array} recipient_exchange_key
* @param {PrivateForest} forest
* @returns {Name}
*/
export function createShareName(share_count, sharer_root_did, recipient_exchange_key, forest) {
    const ptr0 = passStringToWasm0(sharer_root_did, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passArray8ToWasm0(recipient_exchange_key, wasm.__wbindgen_export_0);
    const len1 = WASM_VECTOR_LEN;
    _assertClass(forest, PrivateForest);
    const ret = wasm.createShareName(share_count, ptr0, len0, ptr1, len1, forest.__wbg_ptr);
    return Name.__wrap(ret);
}

/**
* @param {number} share_count
* @param {number} limit
* @param {Uint8Array} recipient_exchange_key
* @param {string} sharer_root_did
* @param {PrivateForest} forest
* @param {BlockStore} store
* @returns {Promise<any>}
*/
export function findLatestShareCounter(share_count, limit, recipient_exchange_key, sharer_root_did, forest, store) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        const ptr0 = passArray8ToWasm0(recipient_exchange_key, wasm.__wbindgen_export_0);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(sharer_root_did, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
        const len1 = WASM_VECTOR_LEN;
        _assertClass(forest, PrivateForest);
        wasm.findLatestShareCounter(retptr, share_count, limit, ptr0, len0, ptr1, len1, forest.__wbg_ptr, addHeapObject(store));
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return takeObject(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* @param {Name} share_name
* @param {PrivateKey} recipient_key
* @param {PrivateForest} forest
* @param {BlockStore} store
* @returns {Promise<any>}
*/
export function receiveShare(share_name, recipient_key, forest, store) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(share_name, Name);
        var ptr0 = share_name.__destroy_into_raw();
        _assertClass(forest, PrivateForest);
        wasm.receiveShare(retptr, ptr0, addHeapObject(recipient_key), forest.__wbg_ptr, addHeapObject(store));
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        if (r2) {
            throw takeObject(r1);
        }
        return takeObject(r0);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* Panic hook lets us get better error messages if our Rust code ever panics.
*
* This function needs to be called at least once during initialisation.
* https://rustwasm.github.io/docs/wasm-pack/tutorials/npm-browser-packages/template-deep-dive/src-utils-rs.html#2-what-is-console_error_panic_hook
*/
export function setPanicHook() {
    wasm.setPanicHook();
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_export_5(addHeapObject(e));
    }
}
function __wbg_adapter_187(arg0, arg1, arg2, arg3) {
    wasm.__wbindgen_export_6(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

const AccessKeyFinalization = new FinalizationRegistry(ptr => wasm.__wbg_accesskey_free(ptr >>> 0));
/**
*/
export class AccessKey {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(AccessKey.prototype);
        obj.__wbg_ptr = ptr;
        AccessKeyFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        AccessKeyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_accesskey_free(ptr);
    }
    /**
    * Return the label in the forest, used for
    * accessing the ciphertext that can be decrypted with
    * this access key.
    * @returns {Uint8Array}
    */
    getLabel() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.accesskey_getLabel(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Returns the temporal key or null, in case this
    * access key only gives access to the shapshot level.
    * @returns {Uint8Array | undefined}
    */
    getTemporalKey() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.accesskey_getTemporalKey(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v1;
            if (r0 !== 0) {
                v1 = getArrayU8FromWasm0(r0, r1).slice();
                wasm.__wbindgen_export_4(r0, r1 * 1);
            }
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Returns the snapshot key.
    * May derive the key on-the-fly in case this
    * AccessKey also gives access to the temporal access level.
    * @returns {Uint8Array}
    */
    getSnapshotKey() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.accesskey_getSnapshotKey(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Return the CID of what this access key decrypts.
    * This is mainly used for disambiguation, in case the
    * label the AccessKey links to has multiple conflicting writes.
    * @returns {Uint8Array}
    */
    getContentCid() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.accesskey_getContentCid(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Serialize this AccessKey into bytes.
    * This will contain secret key material!
    * Make sure to keep safe or encrypt
    * (e.g. using the WebCrypto and asymmetrically encrypting these bytes).
    * @returns {Uint8Array}
    */
    toBytes() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.accesskey_toBytes(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Deserialize an AccessKey previously generated from `into_bytes`.
    * @param {Uint8Array} bytes
    * @returns {AccessKey}
    */
    static fromBytes(bytes) {
        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_0);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.accesskey_fromBytes(ptr0, len0);
        return AccessKey.__wrap(ret);
    }
}

const ForeignBlockStoreFinalization = new FinalizationRegistry(ptr => wasm.__wbg_foreignblockstore_free(ptr >>> 0));
/**
* A block store provided by the host (JavaScript) for custom implementation like connection to the IPFS network.
*/
export class ForeignBlockStore {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ForeignBlockStoreFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_foreignblockstore_free(ptr);
    }
}

const ForeignExchangeKeyFinalization = new FinalizationRegistry(ptr => wasm.__wbg_foreignexchangekey_free(ptr >>> 0));
/**
*/
export class ForeignExchangeKey {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ForeignExchangeKeyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_foreignexchangekey_free(ptr);
    }
}

const ForeignPrivateKeyFinalization = new FinalizationRegistry(ptr => wasm.__wbg_foreignprivatekey_free(ptr >>> 0));
/**
*/
export class ForeignPrivateKey {

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ForeignPrivateKeyFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_foreignprivatekey_free(ptr);
    }
}

const ForestChangeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_forestchange_free(ptr >>> 0));
/**
*/
export class ForestChange {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(ForestChange.prototype);
        obj.__wbg_ptr = ptr;
        ForestChangeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        ForestChangeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_forestchange_free(ptr);
    }
    /**
    * @returns {string}
    */
    getChangeType() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.forestchange_getChangeType(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
    /**
    * @returns {NameAccumulator}
    */
    getKey() {
        const ret = wasm.forestchange_getKey(this.__wbg_ptr);
        return NameAccumulator.__wrap(ret);
    }
    /**
    * @returns {(Uint8Array)[]}
    */
    getValue1() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.forestchange_getValue1(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 4);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {(Uint8Array)[]}
    */
    getValue2() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.forestchange_getValue2(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 4);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}

const NameFinalization = new FinalizationRegistry(ptr => wasm.__wbg_name_free(ptr >>> 0));
/**
*/
export class Name {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(Name.prototype);
        obj.__wbg_ptr = ptr;
        NameFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        NameFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_name_free(ptr);
    }
}

const NameAccumulatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_nameaccumulator_free(ptr >>> 0));
/**
*/
export class NameAccumulator {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(NameAccumulator.prototype);
        obj.__wbg_ptr = ptr;
        NameAccumulatorFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        NameAccumulatorFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_nameaccumulator_free(ptr);
    }
}

const PrivateDirectoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_privatedirectory_free(ptr >>> 0));
/**
* A directory in a WNFS public file system.
*/
export class PrivateDirectory {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PrivateDirectory.prototype);
        obj.__wbg_ptr = ptr;
        PrivateDirectoryFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PrivateDirectoryFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_privatedirectory_free(ptr);
    }
    /**
    * Creates a new private directory.
    * @param {Name} parent_bare_name
    * @param {Date} time
    * @param {Rng} rng
    */
    constructor(parent_bare_name, time, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(parent_bare_name, Name);
            var ptr0 = parent_bare_name.__destroy_into_raw();
            wasm.privatedirectory_new(retptr, ptr0, addBorrowedObject(time), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateDirectory.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * This contstructor creates a new private directory and stores it in a provided `PrivateForest`.
    * @param {Name} parent_bare_name
    * @param {Date} time
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<Promise<any>>}
    */
    static newAndStore(parent_bare_name, time, forest, store, rng) {
        _assertClass(parent_bare_name, Name);
        var ptr0 = parent_bare_name.__destroy_into_raw();
        _assertClass(forest, PrivateForest);
        const ret = wasm.privatedirectory_newAndStore(ptr0, addHeapObject(time), forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
        return takeObject(ret);
    }
    /**
    * Persists the current state of this directory in the BlockStore and PrivateForest.
    * This will also force a history entry to be created, if there were changes.
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    store(forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_store(retptr, this.__wbg_ptr, forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Follows a path and fetches the node at the end of the path.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    getNode(path_segments, search_latest, forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_getNode(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Looks up a node by its path name in the current directory.
    * @param {string} path_segment
    * @param {boolean} search_latest
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    lookupNode(path_segment, search_latest, forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(path_segment, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_lookupNode(retptr, this.__wbg_ptr, ptr0, len0, search_latest, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Reads specified file content from the directory.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    read(path_segments, search_latest, forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_read(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Returns names and metadata of the direct children of a directory.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    ls(path_segments, search_latest, forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_ls(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Removes a file or directory from the directory.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    rm(path_segments, search_latest, forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_rm(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Writes a file to the directory.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {Uint8Array} content
    * @param {Date} time
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    write(path_segments, search_latest, content, time, forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(content, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_write(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, ptr0, len0, addBorrowedObject(time), forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Moves a specified path to a new location.
    * @param {Array<any>} path_segments_from
    * @param {Array<any>} path_segments_to
    * @param {boolean} search_latest
    * @param {Date} time
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    basicMv(path_segments_from, path_segments_to, search_latest, time, forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_basicMv(retptr, this.__wbg_ptr, addBorrowedObject(path_segments_from), addBorrowedObject(path_segments_to), search_latest, addBorrowedObject(time), forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Copies a specified path to a new location.
    * @param {Array<any>} path_segments_from
    * @param {Array<any>} path_segments_to
    * @param {boolean} search_latest
    * @param {Date} time
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    cp(path_segments_from, path_segments_to, search_latest, time, forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_cp(retptr, this.__wbg_ptr, addBorrowedObject(path_segments_from), addBorrowedObject(path_segments_to), search_latest, addBorrowedObject(time), forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Creates a new directory at the specified path.
    *
    * This method acts like `mkdir -p` in Unix because it creates intermediate directories if they do not exist.
    * @param {Array<any>} path_segments
    * @param {boolean} search_latest
    * @param {Date} time
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    mkdir(path_segments, search_latest, time, forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatedirectory_mkdir(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), search_latest, addBorrowedObject(time), forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Gets the metadata of the directory
    * @returns {any}
    */
    metadata() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatedirectory_metadata(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Converts directory to a node.
    * @returns {PrivateNode}
    */
    asNode() {
        const ret = wasm.privatedirectory_asNode(this.__wbg_ptr);
        return PrivateNode.__wrap(ret);
    }
    /**
    * Gets a unique id for node.
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatedirectory_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
}

const PrivateFileFinalization = new FinalizationRegistry(ptr => wasm.__wbg_privatefile_free(ptr >>> 0));
/**
* A file in a WNFS public file system.
*/
export class PrivateFile {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PrivateFile.prototype);
        obj.__wbg_ptr = ptr;
        PrivateFileFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PrivateFileFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_privatefile_free(ptr);
    }
    /**
    * Creates an empty private file.
    * @param {Name} parent_bare_name
    * @param {Date} time
    * @param {Rng} rng
    */
    constructor(parent_bare_name, time, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(parent_bare_name, Name);
            var ptr0 = parent_bare_name.__destroy_into_raw();
            wasm.privatefile_new(retptr, ptr0, addBorrowedObject(time), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateFile.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Creates a file with provided content.
    * @param {Name} parent_bare_name
    * @param {Date} time
    * @param {Uint8Array} content
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    static withContent(parent_bare_name, time, content, forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(parent_bare_name, Name);
            var ptr0 = parent_bare_name.__destroy_into_raw();
            const ptr1 = passArray8ToWasm0(content, wasm.__wbindgen_export_0);
            const len1 = WASM_VECTOR_LEN;
            _assertClass(forest, PrivateForest);
            wasm.privatefile_withContent(retptr, ptr0, addBorrowedObject(time), ptr1, len1, forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Persists the current state of this file in the BlockStore and PrivateForest.
    * This will also force a history entry to be created, if there were changes.
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    store(forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatefile_store(retptr, this.__wbg_ptr, forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the entire content of a file.
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    getContent(forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatefile_getContent(retptr, this.__wbg_ptr, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the metadata of this file.
    * @returns {any}
    */
    metadata() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatefile_metadata(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets a unique id for node.
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatedirectory_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
    /**
    * Converts this file to a node.
    * @returns {PrivateNode}
    */
    asNode() {
        const ret = wasm.privatefile_asNode(this.__wbg_ptr);
        return PrivateNode.__wrap(ret);
    }
}

const PrivateForestFinalization = new FinalizationRegistry(ptr => wasm.__wbg_privateforest_free(ptr >>> 0));
/**
* A reference to a private forest. Used for the private file system.
*/
export class PrivateForest {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PrivateForest.prototype);
        obj.__wbg_ptr = ptr;
        PrivateForestFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PrivateForestFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_privateforest_free(ptr);
    }
    /**
    * Creates a new private forest.
    * @param {Rng} rng
    * @param {Uint8Array | undefined} rsa_modulus_big_endian
    */
    constructor(rng, rsa_modulus_big_endian) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = isLikeNone(rsa_modulus_big_endian) ? 0 : passArray8ToWasm0(rsa_modulus_big_endian, wasm.__wbindgen_export_0);
            var len0 = WASM_VECTOR_LEN;
            wasm.privateforest_new(retptr, addHeapObject(rng), ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateForest.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Loads an existing private forest from a given CID
    * You need to have previously `.store()`ed it to get its CID.
    * @param {Uint8Array} cid
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    static load(cid, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(cid, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.privateforest_load(retptr, ptr0, len0, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Stores this private forest in provided block store.
    * Returns the CID from which it can be `.load()`ed again.
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    store(store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privateforest_store(retptr, this.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {PrivateForest} other
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    merge(other, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(other, PrivateForest);
            wasm.privateforest_merge(retptr, this.__wbg_ptr, other.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {PrivateForest} other
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    diff(other, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(other, PrivateForest);
            wasm.privateforest_diff(retptr, this.__wbg_ptr, other.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {Name}
    */
    emptyName() {
        const ret = wasm.privateforest_emptyName(this.__wbg_ptr);
        return Name.__wrap(ret);
    }
}

const PrivateNodeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_privatenode_free(ptr >>> 0));
/**
* Wraps `wnfs::PrivateNode`.
*/
export class PrivateNode {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PrivateNode.prototype);
        obj.__wbg_ptr = ptr;
        PrivateNodeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PrivateNodeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_privatenode_free(ptr);
    }
    /**
    * Persists the current state of this node in the BlockStore and PrivateForest.
    * This will also force a history entry to be created, if there were changes.
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Rng} rng
    * @returns {Promise<any>}
    */
    store(forest, store, rng) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatenode_store(retptr, this.__wbg_ptr, forest.__wbg_ptr, addHeapObject(store), addHeapObject(rng));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Loads a node from the PrivateForest using the AccessKey.
    * @param {AccessKey} access_key
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @param {Name | undefined} parent_name
    * @returns {Promise<any>}
    */
    static load(access_key, forest, store, parent_name) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(access_key, AccessKey);
            var ptr0 = access_key.__destroy_into_raw();
            _assertClass(forest, PrivateForest);
            let ptr1 = 0;
            if (!isLikeNone(parent_name)) {
                _assertClass(parent_name, Name);
                ptr1 = parent_name.__destroy_into_raw();
            }
            wasm.privatenode_load(retptr, ptr0, forest.__wbg_ptr, addHeapObject(store), ptr1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {PrivateForest} forest
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    searchLatest(forest, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(forest, PrivateForest);
            wasm.privatenode_searchLatest(retptr, this.__wbg_ptr, forest.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {PrivateDirectory}
    */
    asDir() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatenode_asDir(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateDirectory.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {PrivateFile}
    */
    asFile() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatenode_asFile(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateFile.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {boolean}
    */
    isDir() {
        const ret = wasm.privatenode_isDir(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
    * @returns {boolean}
    */
    isFile() {
        const ret = wasm.privatenode_isFile(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatenode_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
}

const PublicDirectoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_publicdirectory_free(ptr >>> 0));
/**
* A directory in a WNFS public file system.
*/
export class PublicDirectory {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PublicDirectory.prototype);
        obj.__wbg_ptr = ptr;
        PublicDirectoryFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PublicDirectoryFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_publicdirectory_free(ptr);
    }
    /**
    * Creates a new directory using the given metadata.
    * @param {Date} time
    */
    constructor(time) {
        try {
            const ret = wasm.publicdirectory_new(addBorrowedObject(time));
            return PublicDirectory.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Follows a path and fetches the node at the end of the path.
    * @param {Array<any>} path_segments
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    getNode(path_segments, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_getNode(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Looks up a node by its path name in the current directory.
    * @param {string} path_segment
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    lookupNode(path_segment, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(path_segment, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.publicdirectory_lookupNode(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Stores directory in provided block store.
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    store(store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_store(retptr, this.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Loads a directory given its CID from the block store.
    * @param {Uint8Array} cid
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    static load(cid, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(cid, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.publicdirectory_load(retptr, ptr0, len0, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Reads specified file content from the directory.
    * @param {Array<any>} path_segments
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    read(path_segments, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_read(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Returns names and metadata of the direct children of a directory.
    * @param {Array<any>} path_segments
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    ls(path_segments, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_ls(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Removes a file or directory from the directory.
    * @param {Array<any>} path_segments
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    rm(path_segments, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_rm(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Writes a file to the directory.
    * @param {Array<any>} path_segments
    * @param {Uint8Array} content_cid
    * @param {Date} time
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    write(path_segments, content_cid, time, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(content_cid, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.publicdirectory_write(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), ptr0, len0, addBorrowedObject(time), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Moves a specified path to a new location.
    * @param {Array<any>} path_segments_from
    * @param {Array<any>} path_segments_to
    * @param {Date} time
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    basicMv(path_segments_from, path_segments_to, time, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_basicMv(retptr, this.__wbg_ptr, addBorrowedObject(path_segments_from), addBorrowedObject(path_segments_to), addBorrowedObject(time), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Copies a specific node to another location.
    * @param {Array<any>} path_segments_from
    * @param {Array<any>} path_segments_to
    * @param {Date} time
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    cp(path_segments_from, path_segments_to, time, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_cp(retptr, this.__wbg_ptr, addBorrowedObject(path_segments_from), addBorrowedObject(path_segments_to), addBorrowedObject(time), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Creates a new directory at the specified path.
    *
    * This method acts like `mkdir -p` in Unix because it creates intermediate directories if they do not exist.
    * @param {Array<any>} path_segments
    * @param {Date} time
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    mkdir(path_segments, time, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_mkdir(retptr, this.__wbg_ptr, addBorrowedObject(path_segments), addBorrowedObject(time), addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Gets the previous CID(s) of the directory.
    * This will usually be an array of a single CID, but may be
    * - an empty array, if this is the first revision of a directory
    * - an array with multiple elements if this is the merge node of
    *   multiple concurrent changes to the directory.
    * @returns {(Uint8Array)[]}
    */
    previousCids() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_previousCids(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 4);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the metadata of the directory
    * @returns {any}
    */
    metadata() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_metadata(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Converts directory to a node.
    * @returns {PublicNode}
    */
    asNode() {
        const ret = wasm.privatedirectory_asNode(this.__wbg_ptr);
        return PublicNode.__wrap(ret);
    }
    /**
    * Gets a unique id for node.
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicdirectory_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
}

const PublicFileFinalization = new FinalizationRegistry(ptr => wasm.__wbg_publicfile_free(ptr >>> 0));
/**
* A file in a WNFS public file system.
*/
export class PublicFile {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PublicFile.prototype);
        obj.__wbg_ptr = ptr;
        PublicFileFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PublicFileFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_publicfile_free(ptr);
    }
    /**
    * Creates a new file in a WNFS public file system.
    * @param {Date} time
    * @param {Uint8Array} cid
    */
    constructor(time, cid) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(cid, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.publicfile_new(retptr, addBorrowedObject(time), ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PublicFile.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Gets a unique id for node.
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicfile_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
    /**
    * Stores a file in provided block store.
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    store(store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicfile_store(retptr, this.__wbg_ptr, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Loads a file given its CID from the block store.
    * @param {Uint8Array} cid
    * @param {BlockStore} store
    * @returns {Promise<any>}
    */
    static load(cid, store) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray8ToWasm0(cid, wasm.__wbindgen_export_0);
            const len0 = WASM_VECTOR_LEN;
            wasm.publicfile_load(retptr, ptr0, len0, addHeapObject(store));
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the previous CID(s) of the file.
    * This will usually be an array of a single CID, but may be
    * - an empty array, if this is the first revision of a file
    * - an array with multiple elements if this is the merge node of
    *   multiple concurrent changes to the file.
    * @returns {(Uint8Array)[]}
    */
    previousCids() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicfile_previousCids(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 4);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the metadata of this file.
    * @returns {any}
    */
    metadata() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicfile_metadata(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Gets the content cid of the file.
    * @returns {Uint8Array}
    */
    contentCid() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicfile_contentCid(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_4(r0, r1 * 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Converts this directory to a node.
    * @returns {PublicNode}
    */
    asNode() {
        const ret = wasm.privatefile_asNode(this.__wbg_ptr);
        return PublicNode.__wrap(ret);
    }
}

const PublicNodeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_publicnode_free(ptr >>> 0));
/**
* Wraps a wnfs PublicNode.
*/
export class PublicNode {

    static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(PublicNode.prototype);
        obj.__wbg_ptr = ptr;
        PublicNodeFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        PublicNodeFinalization.unregister(this);
        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_publicnode_free(ptr);
    }
    /**
    * @returns {PublicDirectory}
    */
    asDir() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicnode_asDir(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PublicDirectory.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {PublicFile}
    */
    asFile() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatenode_asFile(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PublicFile.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {boolean}
    */
    isDir() {
        const ret = wasm.privatenode_isDir(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
    * @returns {boolean}
    */
    isFile() {
        const ret = wasm.privatenode_isFile(this.__wbg_ptr);
        return ret !== 0;
    }
    /**
    * @returns {string}
    */
    getId() {
        let deferred1_0;
        let deferred1_1;
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.publicnode_getId(retptr, this.__wbg_ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            deferred1_0 = r0;
            deferred1_1 = r1;
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_export_4(deferred1_0, deferred1_1, 1);
        }
    }
}

export function __wbindgen_string_new(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

export function __wbindgen_bigint_from_u64(arg0) {
    const ret = BigInt.asUintN(64, arg0);
    return addHeapObject(ret);
};

export function __wbindgen_object_drop_ref(arg0) {
    takeObject(arg0);
};

export function __wbindgen_number_new(arg0) {
    const ret = arg0;
    return addHeapObject(ret);
};

export function __wbindgen_string_get(arg0, arg1) {
    const obj = getObject(arg1);
    const ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
    var len1 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len1;
    getInt32Memory0()[arg0 / 4 + 0] = ptr1;
};

export function __wbg_putBlock_6797d7f8a56c0582(arg0, arg1, arg2, arg3) {
    var v0 = getArrayU8FromWasm0(arg1, arg2).slice();
    wasm.__wbindgen_export_4(arg1, arg2 * 1);
    const ret = getObject(arg0).putBlock(v0, arg3 >>> 0);
    return addHeapObject(ret);
};

export function __wbg_getBlock_a8a9ac5abc90f9ab(arg0, arg1, arg2) {
    var v0 = getArrayU8FromWasm0(arg1, arg2).slice();
    wasm.__wbindgen_export_4(arg1, arg2 * 1);
    const ret = getObject(arg0).getBlock(v0);
    return addHeapObject(ret);
};

export function __wbg_accesskey_new(arg0) {
    const ret = AccessKey.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_privatedirectory_new(arg0) {
    const ret = PrivateDirectory.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_fromModulus_97a049c4fe140f69(arg0, arg1) {
    const ret = ExchangeKey.fromModulus(getArrayU8FromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export function __wbg_encrypt_4ad81db2a78f36a1(arg0, arg1, arg2) {
    const ret = getObject(arg0).encrypt(getArrayU8FromWasm0(arg1, arg2));
    return addHeapObject(ret);
};

export function __wbg_decrypt_88f8855186ac3c47(arg0, arg1, arg2) {
    const ret = getObject(arg0).decrypt(getArrayU8FromWasm0(arg1, arg2));
    return addHeapObject(ret);
};

export function __wbg_privatefile_new(arg0) {
    const ret = PrivateFile.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_privateforest_new(arg0) {
    const ret = PrivateForest.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_privatenode_new(arg0) {
    const ret = PrivateNode.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_forestchange_new(arg0) {
    const ret = ForestChange.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_randomBytes_2f66089dc0288d47(arg0, arg1, arg2) {
    const ret = getObject(arg1).randomBytes(arg2 >>> 0);
    const ptr1 = passArray8ToWasm0(ret, wasm.__wbindgen_export_0);
    const len1 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len1;
    getInt32Memory0()[arg0 / 4 + 0] = ptr1;
};

export function __wbg_publicdirectory_new(arg0) {
    const ret = PublicDirectory.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_publicfile_new(arg0) {
    const ret = PublicFile.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_publicnode_new(arg0) {
    const ret = PublicNode.__wrap(arg0);
    return addHeapObject(ret);
};

export function __wbg_new_abda76e883ba8a5f() {
    const ret = new Error();
    return addHeapObject(ret);
};

export function __wbg_stack_658279fe44541cf6(arg0, arg1) {
    const ret = getObject(arg1).stack;
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
    const len1 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len1;
    getInt32Memory0()[arg0 / 4 + 0] = ptr1;
};

export function __wbg_error_f851667af71bcfc6(arg0, arg1) {
    let deferred0_0;
    let deferred0_1;
    try {
        deferred0_0 = arg0;
        deferred0_1 = arg1;
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_export_4(deferred0_0, deferred0_1, 1);
    }
};

export function __wbindgen_cb_drop(arg0) {
    const obj = takeObject(arg0).original;
    if (obj.cnt-- == 1) {
        obj.a = 0;
        return true;
    }
    const ret = false;
    return ret;
};

export function __wbindgen_is_object(arg0) {
    const val = getObject(arg0);
    const ret = typeof(val) === 'object' && val !== null;
    return ret;
};

export function __wbg_randomFillSync_dc1e9a60c158336d() { return handleError(function (arg0, arg1) {
    getObject(arg0).randomFillSync(takeObject(arg1));
}, arguments) };

export function __wbg_getRandomValues_37fa2ca9e4e07fab() { return handleError(function (arg0, arg1) {
    getObject(arg0).getRandomValues(getObject(arg1));
}, arguments) };

export function __wbg_crypto_c48a774b022d20ac(arg0) {
    const ret = getObject(arg0).crypto;
    return addHeapObject(ret);
};

export function __wbg_process_298734cf255a885d(arg0) {
    const ret = getObject(arg0).process;
    return addHeapObject(ret);
};

export function __wbg_versions_e2e78e134e3e5d01(arg0) {
    const ret = getObject(arg0).versions;
    return addHeapObject(ret);
};

export function __wbg_node_1cd7a5d853dbea79(arg0) {
    const ret = getObject(arg0).node;
    return addHeapObject(ret);
};

export function __wbindgen_is_string(arg0) {
    const ret = typeof(getObject(arg0)) === 'string';
    return ret;
};

export function __wbg_require_8f08ceecec0f4fee() { return handleError(function () {
    const ret = module.require;
    return addHeapObject(ret);
}, arguments) };

export function __wbg_msCrypto_bcb970640f50a1e8(arg0) {
    const ret = getObject(arg0).msCrypto;
    return addHeapObject(ret);
};

export function __wbindgen_is_function(arg0) {
    const ret = typeof(getObject(arg0)) === 'function';
    return ret;
};

export function __wbindgen_object_clone_ref(arg0) {
    const ret = getObject(arg0);
    return addHeapObject(ret);
};

export function __wbg_self_1ff1d729e9aae938() { return handleError(function () {
    const ret = self.self;
    return addHeapObject(ret);
}, arguments) };

export function __wbg_window_5f4faef6c12b79ec() { return handleError(function () {
    const ret = window.window;
    return addHeapObject(ret);
}, arguments) };

export function __wbg_globalThis_1d39714405582d3c() { return handleError(function () {
    const ret = globalThis.globalThis;
    return addHeapObject(ret);
}, arguments) };

export function __wbg_global_651f05c6a0944d1c() { return handleError(function () {
    const ret = global.global;
    return addHeapObject(ret);
}, arguments) };

export function __wbindgen_is_undefined(arg0) {
    const ret = getObject(arg0) === undefined;
    return ret;
};

export function __wbg_newnoargs_581967eacc0e2604(arg0, arg1) {
    const ret = new Function(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export function __wbg_length_fff51ee6522a1a18(arg0) {
    const ret = getObject(arg0).length;
    return ret;
};

export function __wbg_new_898a68150f225f2e() {
    const ret = new Array();
    return addHeapObject(ret);
};

export function __wbg_new_b51585de1b234aff() {
    const ret = new Object();
    return addHeapObject(ret);
};

export function __wbg_get_44be0491f933a435(arg0, arg1) {
    const ret = getObject(arg0)[arg1 >>> 0];
    return addHeapObject(ret);
};

export function __wbg_push_ca1c26067ef907ac(arg0, arg1) {
    const ret = getObject(arg0).push(getObject(arg1));
    return ret;
};

export function __wbg_new_d258248ed531ff54(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export function __wbg_call_cb65541d95d71282() { return handleError(function (arg0, arg1) {
    const ret = getObject(arg0).call(getObject(arg1));
    return addHeapObject(ret);
}, arguments) };

export function __wbg_call_01734de55d61e11d() { return handleError(function (arg0, arg1, arg2) {
    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
    return addHeapObject(ret);
}, arguments) };

export function __wbg_getTime_5e2054f832d82ec9(arg0) {
    const ret = getObject(arg0).getTime();
    return ret;
};

export function __wbg_set_092e06b0f9d71865() { return handleError(function (arg0, arg1, arg2) {
    const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
    return ret;
}, arguments) };

export function __wbg_buffer_085ec1f694018c4f(arg0) {
    const ret = getObject(arg0).buffer;
    return addHeapObject(ret);
};

export function __wbg_new_43f1b47c28813cbd(arg0, arg1) {
    try {
        var state0 = {a: arg0, b: arg1};
        var cb0 = (arg0, arg1) => {
            const a = state0.a;
            state0.a = 0;
            try {
                return __wbg_adapter_187(a, state0.b, arg0, arg1);
            } finally {
                state0.a = a;
            }
        };
        const ret = new Promise(cb0);
        return addHeapObject(ret);
    } finally {
        state0.a = state0.b = 0;
    }
};

export function __wbg_resolve_53698b95aaf7fcf8(arg0) {
    const ret = Promise.resolve(getObject(arg0));
    return addHeapObject(ret);
};

export function __wbg_then_f7e06ee3c11698eb(arg0, arg1) {
    const ret = getObject(arg0).then(getObject(arg1));
    return addHeapObject(ret);
};

export function __wbg_then_b2267541e2a73865(arg0, arg1, arg2) {
    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
    return addHeapObject(ret);
};

export function __wbg_newwithbyteoffsetandlength_6da8e527659b86aa(arg0, arg1, arg2) {
    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
    return addHeapObject(ret);
};

export function __wbg_new_8125e318e6245eed(arg0) {
    const ret = new Uint8Array(getObject(arg0));
    return addHeapObject(ret);
};

export function __wbg_newwithlength_e5d69174d6984cd7(arg0) {
    const ret = new Uint8Array(arg0 >>> 0);
    return addHeapObject(ret);
};

export function __wbg_subarray_13db269f57aa838d(arg0, arg1, arg2) {
    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
    return addHeapObject(ret);
};

export function __wbg_length_72e2208bbc0efc61(arg0) {
    const ret = getObject(arg0).length;
    return ret;
};

export function __wbg_set_5cf90238115182c3(arg0, arg1, arg2) {
    getObject(arg0).set(getObject(arg1), arg2 >>> 0);
};

export function __wbindgen_debug_string(arg0, arg1) {
    const ret = debugString(getObject(arg1));
    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_export_0, wasm.__wbindgen_export_1);
    const len1 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len1;
    getInt32Memory0()[arg0 / 4 + 0] = ptr1;
};

export function __wbindgen_throw(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

export function __wbindgen_memory() {
    const ret = wasm.memory;
    return addHeapObject(ret);
};

export function __wbindgen_closure_wrapper3769(arg0, arg1, arg2) {
    const ret = makeMutClosure(arg0, arg1, 673, __wbg_adapter_30);
    return addHeapObject(ret);
};

