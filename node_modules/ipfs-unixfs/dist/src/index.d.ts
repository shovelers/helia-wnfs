export interface Mtime {
    secs: bigint;
    nsecs?: number;
}
export type MtimeLike = Mtime | {
    Seconds: number;
    FractionalNanoseconds?: number;
} | [number, number] | Date;
export interface UnixFSOptions {
    type?: string;
    data?: Uint8Array;
    blockSizes?: bigint[];
    hashType?: bigint;
    fanout?: bigint;
    mtime?: Mtime;
    mode?: number;
}
declare class UnixFS {
    /**
     * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md
     */
    static unmarshal(marshaled: Uint8Array): UnixFS;
    type: string;
    data?: Uint8Array;
    blockSizes: bigint[];
    hashType?: bigint;
    fanout?: bigint;
    mtime?: Mtime;
    private _mode?;
    private _originalMode;
    constructor(options?: UnixFSOptions);
    set mode(mode: number | undefined);
    get mode(): number | undefined;
    isDirectory(): boolean;
    addBlockSize(size: bigint): void;
    removeBlockSize(index: number): void;
    /**
     * Returns `0n` for directories or `data.length + sum(blockSizes)` for everything else
     */
    fileSize(): bigint;
    /**
     * encode to protobuf Uint8Array
     */
    marshal(): Uint8Array;
}
export { UnixFS };
//# sourceMappingURL=index.d.ts.map