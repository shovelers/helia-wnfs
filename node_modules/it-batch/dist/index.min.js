(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.ItBatch = factory()}(typeof self !== 'undefined' ? self : this, function () {
"use strict";var ItBatch=(()=>{var e=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var o=Object.getOwnPropertyNames;var i=Object.prototype.hasOwnProperty;var a=(l,t)=>{for(var n in t)e(l,n,{get:t[n],enumerable:!0})},f=(l,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let h of o(t))!i.call(l,h)&&h!==n&&e(l,h,{get:()=>t[h],enumerable:!(r=c(t,h))||r.enumerable});return l};var u=l=>f(e({},"__esModule",{value:!0}),l);var d={};a(d,{default:()=>y});function g(l){return l[Symbol.asyncIterator]!=null}function w(l,t=1){return t=Number(t),g(l)?async function*(){let n=[];if(t<1&&(t=1),t!==Math.round(t))throw new Error("Batch size must be an integer");for await(let r of l)for(n.push(r);n.length>=t;)yield n.slice(0,t),n=n.slice(t);for(;n.length>0;)yield n.slice(0,t),n=n.slice(t)}():function*(){let n=[];if(t<1&&(t=1),t!==Math.round(t))throw new Error("Batch size must be an integer");for(let r of l)for(n.push(r);n.length>=t;)yield n.slice(0,t),n=n.slice(t);for(;n.length>0;)yield n.slice(0,t),n=n.slice(t)}()}var y=w;return u(d);})();
return ItBatch}));
