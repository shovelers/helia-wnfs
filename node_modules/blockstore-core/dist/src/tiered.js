import { logger } from '@libp2p/logger';
import drain from 'it-drain';
import filter from 'it-filter';
import merge from 'it-merge';
import { pushable } from 'it-pushable';
import { BaseBlockstore } from './base.js';
import * as Errors from './errors.js';
const log = logger('blockstore:core:tiered');
/**
 * A blockstore that can combine multiple stores. Puts and deletes
 * will write through to all blockstores. Has and get will
 * try each store sequentially. getAll will use every store but also
 * deduplicate any yielded pairs.
 */
export class TieredBlockstore extends BaseBlockstore {
    stores;
    constructor(stores) {
        super();
        this.stores = stores.slice();
    }
    async put(key, value, options) {
        try {
            await Promise.all(this.stores.map(async (store) => { await store.put(key, value, options); }));
            return key;
        }
        catch (err) {
            throw Errors.putFailedError(err);
        }
    }
    async get(key, options) {
        for (const store of this.stores) {
            try {
                const res = await store.get(key, options);
                if (res != null)
                    return res;
            }
            catch (err) {
                log.error(err);
            }
        }
        throw Errors.notFoundError();
    }
    async has(key, options) {
        for (const s of this.stores) {
            if (await s.has(key, options)) {
                return true;
            }
        }
        return false;
    }
    async delete(key, options) {
        try {
            await Promise.all(this.stores.map(async (store) => { await store.delete(key, options); }));
        }
        catch (err) {
            throw Errors.deleteFailedError(err);
        }
    }
    async *putMany(source, options = {}) {
        let error;
        const pushables = this.stores.map(store => {
            const source = pushable({
                objectMode: true
            });
            drain(store.putMany(source, options))
                .catch(err => {
                // store threw while putting, make sure we bubble the error up
                error = err;
            });
            return source;
        });
        try {
            for await (const pair of source) {
                if (error != null) {
                    throw error;
                }
                pushables.forEach(p => p.push(pair));
                yield pair.cid;
            }
        }
        finally {
            pushables.forEach(p => p.end());
        }
    }
    async *deleteMany(source, options = {}) {
        let error;
        const pushables = this.stores.map(store => {
            const source = pushable({
                objectMode: true
            });
            drain(store.deleteMany(source, options))
                .catch(err => {
                // store threw while deleting, make sure we bubble the error up
                error = err;
            });
            return source;
        });
        try {
            for await (const key of source) {
                if (error != null) {
                    throw error;
                }
                pushables.forEach(p => p.push(key));
                yield key;
            }
        }
        finally {
            pushables.forEach(p => p.end());
        }
    }
    async *getAll(options) {
        // deduplicate yielded pairs
        const seen = new Set();
        yield* filter(merge(...this.stores.map(s => s.getAll(options))), (pair) => {
            const cidStr = pair.cid.toString();
            if (seen.has(cidStr)) {
                return false;
            }
            seen.add(cidStr);
            return true;
        });
    }
}
//# sourceMappingURL=tiered.js.map