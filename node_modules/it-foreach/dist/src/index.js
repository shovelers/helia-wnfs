/**
 * @packageDocumentation
 *
 * Calls a function for each value in an (async)iterable.
 *
 * The function can be sync or async.
 *
 * Async functions can be awaited on so may slow down processing of the (async)iterable.
 *
 * @example
 *
 * ```javascript
 * import each from 'it-foreach'
 * import drain from 'it-drain'
 *
 * // This can also be an iterator, generator, etc
 * const values = [0, 1, 2, 3, 4]
 *
 * // prints 0, 1, 2, 3, 4
 * const arr = drain(
 *   each(values, console.info)
 * )
 * ```
 *
 * Async sources and callbacks must be awaited:
 *
 * ```javascript
 * import each from 'it-foreach'
 * import drain from 'it-drain'
 *
 * const values = async function * () {
 *   yield * [0, 1, 2, 3, 4]
 * }
 *
 * // prints 0, 1, 2, 3, 4
 * const arr = await drain(
 *   each(values(), console.info)
 * )
 * ```
 */
import peek from 'it-peekable';
function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
function isPromise(thing) {
    return thing?.then != null;
}
function forEach(source, fn) {
    if (isAsyncIterable(source)) {
        return (async function* () {
            for await (const val of source) {
                const res = fn(val);
                if (isPromise(res)) {
                    await res;
                }
                yield val;
            }
        })();
    }
    // if fn function returns a promise we have to return an async generator
    const peekable = peek(source);
    const { value, done } = peekable.next();
    if (done === true) {
        return (function* () { }());
    }
    const res = fn(value);
    if (typeof res?.then === 'function') {
        return (async function* () {
            yield value;
            for await (const val of peekable) {
                const res = fn(val);
                if (isPromise(res)) {
                    await res;
                }
                yield val;
            }
        })();
    }
    const func = fn;
    return (function* () {
        yield value;
        for (const val of peekable) {
            func(val);
            yield val;
        }
    })();
}
export default forEach;
//# sourceMappingURL=index.js.map