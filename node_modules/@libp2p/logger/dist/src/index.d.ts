/**
 * @packageDocumentation
 *
 * A logger for libp2p based on the venerable [debug](https://www.npmjs.com/package/debug)
 * module.
 *
 * @example
 *
 * ```JavaScript
 * import { logger } from '@libp2p/logger'
 *
 * const log = logger('libp2p:my:component:name')
 *
 * log('something happened: %s', 'it was ok')
 * log.error('something bad happened: %o', err)
 *
 * log('with this peer: %p', aPeerId)
 * log('and this base58btc: %b', aUint8Array)
 * log('and this base32: %t', aUint8Array)
 *  ```
 * ```console
 * $ DEBUG=libp2p:* node index.js
 * something happened: it was ok
 * something bad happened: <stack trace>
 * with this peer: 12D3Foo
 * with this base58btc: Qmfoo
 * with this base32: bafyfoo
 * ```
 */
import type { PeerId } from '@libp2p/interface/peer-id';
export interface Logger {
    (formatter: any, ...args: any[]): void;
    error(formatter: any, ...args: any[]): void;
    trace(formatter: any, ...args: any[]): void;
    enabled: boolean;
}
export interface ComponentLogger {
    forComponent(name: string): Logger;
}
export interface PeerLoggerOptions {
    prefixLength: number;
    suffixLength: number;
}
/**
 * Create a component logger that will prefix any log messages with a truncated
 * peer id.
 *
 * @example
 *
 * ```TypeScript
 * import { peerLogger } from '@libp2p/logger'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const peerId = peerIdFromString('12D3FooBar')
 * const logger = peerLogger(peerId)
 *
 * const log = logger.forComponent('my-component')
 * log.info('hello world')
 * // logs "12â€¦oBar:my-component hello world"
 * ```
 */
export declare function peerLogger(peerId: PeerId, options?: Partial<PeerLoggerOptions>): ComponentLogger;
/**
 * Create a component logger that will prefix any log messages with the passed
 * string.
 *
 * @example
 *
 * ```TypeScript
 * import { prefixLogger } from '@libp2p/logger'
 *
 * const logger = prefixLogger('my-node')
 *
 * const log = logger.forComponent('my-component')
 * log.info('hello world')
 * // logs "my-node:my-component hello world"
 * ```
 */
export declare function prefixLogger(prefix: string): ComponentLogger;
/**
 * Create a component logger
 *
 * @example
 *
 * ```TypeScript
 * import { defaultLogger } from '@libp2p/logger'
 * import { peerIdFromString } from '@libp2p/peer-id'
 *
 * const logger = defaultLogger()
 *
 * const log = logger.forComponent('my-component')
 * log.info('hello world')
 * // logs "my-component hello world"
 * ```
 */
export declare function defaultLogger(): ComponentLogger;
/**
 * Creates a logger for the passed component name.
 *
 * @example
 *
 * ```TypeScript
 * import { logger } from '@libp2p/logger'
 *
 * const log = logger('my-component')
 * log.info('hello world')
 * // logs "my-component hello world"
 * ```
 */
export declare function logger(name: string): Logger;
export declare function disable(): void;
export declare function enable(namespaces: string): void;
export declare function enabled(namespaces: string): boolean;
//# sourceMappingURL=index.d.ts.map