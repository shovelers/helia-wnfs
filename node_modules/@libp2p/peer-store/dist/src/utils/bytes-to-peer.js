import { peerIdFromPeerId } from '@libp2p/peer-id';
import { multiaddr } from '@multiformats/multiaddr';
import { Peer as PeerPB } from '../pb/peer.js';
export function bytesToPeer(peerId, buf) {
    const peer = PeerPB.decode(buf);
    if (peer.publicKey != null && peerId.publicKey == null) {
        peerId = peerIdFromPeerId({
            ...peerId,
            publicKey: peerId.publicKey
        });
    }
    const tags = new Map();
    // remove any expired tags
    const now = BigInt(Date.now());
    for (const [key, tag] of peer.tags.entries()) {
        if (tag.expiry != null && tag.expiry < now) {
            continue;
        }
        tags.set(key, tag);
    }
    return {
        ...peer,
        id: peerId,
        addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {
            return {
                multiaddr: multiaddr(ma),
                isCertified: isCertified ?? false
            };
        }),
        metadata: peer.metadata,
        peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined,
        tags
    };
}
//# sourceMappingURL=bytes-to-peer.js.map