import { type ContentRouting, contentRouting } from '@libp2p/interface/content-routing';
import { TypedEventEmitter } from '@libp2p/interface/events';
import { type PeerDiscovery, peerDiscovery, type PeerDiscoveryEvents } from '@libp2p/interface/peer-discovery';
import { type PeerRouting, peerRouting } from '@libp2p/interface/peer-routing';
import { DefaultKadDHT } from './kad-dht.js';
import type { DualKadDHT, KadDHTComponents, KadDHTInit, QueryEvent, QueryOptions } from './index.js';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { CID } from 'multiformats/cid';
/**
 * A DHT implementation modelled after Kademlia with S/Kademlia modifications.
 * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.
 */
export declare class DefaultDualKadDHT extends TypedEventEmitter<PeerDiscoveryEvents> implements DualKadDHT, PeerDiscovery {
    readonly wan: DefaultKadDHT;
    readonly lan: DefaultKadDHT;
    readonly components: KadDHTComponents;
    private readonly contentRouting;
    private readonly peerRouting;
    constructor(components: KadDHTComponents, init?: KadDHTInit);
    readonly [Symbol.toStringTag] = "@libp2p/dual-kad-dht";
    get [contentRouting](): ContentRouting;
    get [peerRouting](): PeerRouting;
    get [peerDiscovery](): PeerDiscovery;
    /**
     * Is this DHT running.
     */
    isStarted(): boolean;
    /**
     * If 'server' this node will respond to DHT queries, if 'client' this node will not
     */
    getMode(): Promise<'client' | 'server'>;
    /**
     * If 'server' this node will respond to DHT queries, if 'client' this node will not
     */
    setMode(mode: 'client' | 'server'): Promise<void>;
    /**
     * Start listening to incoming connections.
     */
    start(): Promise<void>;
    /**
     * Stop accepting incoming connections and sending outgoing
     * messages.
     */
    stop(): Promise<void>;
    /**
     * Store the given key/value pair in the DHT
     */
    put(key: Uint8Array, value: Uint8Array, options?: QueryOptions): AsyncGenerator<QueryEvent>;
    /**
     * Get the value that corresponds to the passed key
     */
    get(key: Uint8Array, options?: QueryOptions): AsyncGenerator<QueryEvent>;
    /**
     * Announce to the network that we can provide given key's value
     */
    provide(key: CID, options?: QueryOptions): AsyncGenerator<QueryEvent>;
    /**
     * Search the dht for up to `K` providers of the given CID
     */
    findProviders(key: CID, options?: QueryOptions): AsyncGenerator<QueryEvent, void, undefined>;
    /**
     * Search for a peer with the given ID
     */
    findPeer(id: PeerId, options?: QueryOptions): AsyncGenerator<QueryEvent>;
    /**
     * Kademlia 'node lookup' operation
     */
    getClosestPeers(key: Uint8Array, options?: QueryOptions): AsyncGenerator<QueryEvent, void, undefined>;
    refreshRoutingTable(): Promise<void>;
}
//# sourceMappingURL=dual-kad-dht.d.ts.map