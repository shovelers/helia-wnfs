import type { SendQueryEvent, PeerResponseEvent, DialPeerEvent, AddPeerEvent, ValueEvent, ProviderEvent, QueryErrorEvent, FinalPeerEvent, QueryOptions } from '../index.js';
import type { Message } from '../message/dht.js';
import type { Libp2pRecord } from '../record/index.js';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { PeerInfo } from '@libp2p/interface/peer-info';
export interface QueryEventFields {
    to: PeerId;
    type: Message.MessageType;
}
export declare function sendQueryEvent(fields: QueryEventFields, options?: QueryOptions): SendQueryEvent;
export interface PeerResponseEventField {
    from: PeerId;
    messageType: Message.MessageType;
    closer?: PeerInfo[];
    providers?: PeerInfo[];
    record?: Libp2pRecord;
}
export declare function peerResponseEvent(fields: PeerResponseEventField, options?: QueryOptions): PeerResponseEvent;
export interface FinalPeerEventFields {
    from: PeerId;
    peer: PeerInfo;
}
export declare function finalPeerEvent(fields: FinalPeerEventFields, options?: QueryOptions): FinalPeerEvent;
export interface ErrorEventFields {
    from: PeerId;
    error: Error;
}
export declare function queryErrorEvent(fields: ErrorEventFields, options?: QueryOptions): QueryErrorEvent;
export interface ProviderEventFields {
    from: PeerId;
    providers: PeerInfo[];
}
export declare function providerEvent(fields: ProviderEventFields, options?: QueryOptions): ProviderEvent;
export interface ValueEventFields {
    from: PeerId;
    value: Uint8Array;
}
export declare function valueEvent(fields: ValueEventFields, options?: QueryOptions): ValueEvent;
export interface PeerEventFields {
    peer: PeerId;
}
export declare function addPeerEvent(fields: PeerEventFields, options?: QueryOptions): AddPeerEvent;
export interface DialPeerEventFields {
    peer: PeerId;
}
export declare function dialPeerEvent(fields: DialPeerEventFields, options?: QueryOptions): DialPeerEvent;
//# sourceMappingURL=events.d.ts.map