import type { KadDHTComponents, PeerResponseEvent, ProviderEvent, QueryEvent, QueryOptions } from '../index.js';
import type { Network } from '../network.js';
import type { PeerRouting } from '../peer-routing/index.js';
import type { Providers } from '../providers.js';
import type { QueryManager } from '../query/manager.js';
import type { RoutingTable } from '../routing-table/index.js';
import type { Multiaddr } from '@multiformats/multiaddr';
import type { CID } from 'multiformats/cid';
export interface ContentRoutingInit {
    network: Network;
    peerRouting: PeerRouting;
    queryManager: QueryManager;
    routingTable: RoutingTable;
    providers: Providers;
    lan: boolean;
}
export declare class ContentRouting {
    private readonly log;
    private readonly components;
    private readonly network;
    private readonly peerRouting;
    private readonly queryManager;
    private readonly routingTable;
    private readonly providers;
    constructor(components: KadDHTComponents, init: ContentRoutingInit);
    /**
     * Announce to the network that we can provide the value for a given key and
     * are contactable on the given multiaddrs
     */
    provide(key: CID, multiaddrs: Multiaddr[], options?: QueryOptions): AsyncGenerator<QueryEvent, void, undefined>;
    /**
     * Search the dht for up to `K` providers of the given CID.
     */
    findProviders(key: CID, options: QueryOptions): AsyncGenerator<PeerResponseEvent | ProviderEvent | QueryEvent>;
}
//# sourceMappingURL=index.d.ts.map