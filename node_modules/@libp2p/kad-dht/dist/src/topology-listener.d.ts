import { TypedEventEmitter } from '@libp2p/interface/events';
import type { KadDHTComponents } from '.';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { Startable } from '@libp2p/interface/startable';
export interface TopologyListenerInit {
    protocol: string;
    lan: boolean;
}
export interface TopologyListenerEvents {
    'peer': CustomEvent<PeerId>;
}
/**
 * Receives notifications of new peers joining the network that support the DHT protocol
 */
export declare class TopologyListener extends TypedEventEmitter<TopologyListenerEvents> implements Startable {
    private readonly log;
    private readonly components;
    private readonly protocol;
    private running;
    private registrarId?;
    constructor(components: KadDHTComponents, init: TopologyListenerInit);
    isStarted(): boolean;
    /**
     * Start the network
     */
    start(): Promise<void>;
    /**
     * Stop all network activity
     */
    stop(): Promise<void>;
}
//# sourceMappingURL=topology-listener.d.ts.map