import { Message } from '../message/index.js';
import { type FindNodeHandlerComponents } from './handlers/find-node.js';
import { type GetProvidersHandlerComponents } from './handlers/get-providers.js';
import { type GetValueHandlerComponents } from './handlers/get-value.js';
import { type PutValueHandlerComponents } from './handlers/put-value.js';
import type { Validators } from '../index.js';
import type { PeerRouting } from '../peer-routing';
import type { Providers } from '../providers';
import type { RoutingTable } from '../routing-table';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { IncomingStreamData } from '@libp2p/interface-internal/registrar';
export interface DHTMessageHandler {
    handle(peerId: PeerId, msg: Message): Promise<Message | undefined>;
}
export interface RPCInit {
    routingTable: RoutingTable;
    providers: Providers;
    peerRouting: PeerRouting;
    validators: Validators;
    lan: boolean;
}
export interface RPCComponents extends GetValueHandlerComponents, PutValueHandlerComponents, FindNodeHandlerComponents, GetProvidersHandlerComponents {
}
export declare class RPC {
    private readonly handlers;
    private readonly routingTable;
    private readonly log;
    constructor(components: RPCComponents, init: RPCInit);
    /**
     * Process incoming DHT messages
     */
    handleMessage(peerId: PeerId, msg: Message): Promise<Message | undefined>;
    /**
     * Handle incoming streams on the dht protocol
     */
    onIncomingStream(data: IncomingStreamData): void;
}
//# sourceMappingURL=index.d.ts.map