import { Message } from '../../message/index.js';
import { Libp2pRecord } from '../../record/index.js';
import type { PeerRouting } from '../../peer-routing/index.js';
import type { DHTMessageHandler } from '../index.js';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { PeerStore } from '@libp2p/interface/peer-store';
import type { Datastore } from 'interface-datastore';
export interface GetValueHandlerInit {
    peerRouting: PeerRouting;
}
export interface GetValueHandlerComponents {
    peerStore: PeerStore;
    datastore: Datastore;
}
export declare class GetValueHandler implements DHTMessageHandler {
    private readonly components;
    private readonly peerRouting;
    constructor(components: GetValueHandlerComponents, init: GetValueHandlerInit);
    handle(peerId: PeerId, msg: Message): Promise<Message>;
    /**
     * Try to fetch a given record by from the local datastore.
     * Returns the record if it is still valid, meaning
     * - it was either authored by this node, or
     * - it was received less than `MAX_RECORD_AGE` ago.
     */
    _checkLocalDatastore(key: Uint8Array): Promise<Libp2pRecord | undefined>;
}
//# sourceMappingURL=get-value.d.ts.map