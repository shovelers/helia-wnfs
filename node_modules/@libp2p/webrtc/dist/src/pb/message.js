/* eslint-disable import/export */
/* eslint-disable complexity */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';
export var Message;
(function (Message) {
    let Flag;
    (function (Flag) {
        Flag["FIN"] = "FIN";
        Flag["STOP_SENDING"] = "STOP_SENDING";
        Flag["RESET"] = "RESET";
        Flag["FIN_ACK"] = "FIN_ACK";
    })(Flag = Message.Flag || (Message.Flag = {}));
    let __FlagValues;
    (function (__FlagValues) {
        __FlagValues[__FlagValues["FIN"] = 0] = "FIN";
        __FlagValues[__FlagValues["STOP_SENDING"] = 1] = "STOP_SENDING";
        __FlagValues[__FlagValues["RESET"] = 2] = "RESET";
        __FlagValues[__FlagValues["FIN_ACK"] = 3] = "FIN_ACK";
    })(__FlagValues || (__FlagValues = {}));
    (function (Flag) {
        Flag.codec = () => {
            return enumeration(__FlagValues);
        };
    })(Flag = Message.Flag || (Message.Flag = {}));
    let _codec;
    Message.codec = () => {
        if (_codec == null) {
            _codec = message((obj, w, opts = {}) => {
                if (opts.lengthDelimited !== false) {
                    w.fork();
                }
                if (obj.flag != null) {
                    w.uint32(8);
                    Message.Flag.codec().encode(obj.flag, w);
                }
                if (obj.message != null) {
                    w.uint32(18);
                    w.bytes(obj.message);
                }
                if (opts.lengthDelimited !== false) {
                    w.ldelim();
                }
            }, (reader, length) => {
                const obj = {};
                const end = length == null ? reader.len : reader.pos + length;
                while (reader.pos < end) {
                    const tag = reader.uint32();
                    switch (tag >>> 3) {
                        case 1:
                            obj.flag = Message.Flag.codec().decode(reader);
                            break;
                        case 2:
                            obj.message = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                    }
                }
                return obj;
            });
        }
        return _codec;
    };
    Message.encode = (obj) => {
        return encodeMessage(obj, Message.codec());
    };
    Message.decode = (buf) => {
        return decodeMessage(buf, Message.codec());
    };
})(Message || (Message = {}));
//# sourceMappingURL=message.js.map