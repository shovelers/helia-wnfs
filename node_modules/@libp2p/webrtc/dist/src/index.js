/**
 * @packageDocumentation
 *
 * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebRTC datachannels](https://webrtc.org/).
 *
 * @example
 *
 * ```js
 * import { createLibp2p } from 'libp2p'
 * import { noise } from '@chainsafe/libp2p-noise'
 * import { multiaddr } from '@multiformats/multiaddr'
 * import first from 'it-first'
 * import { pipe } from 'it-pipe'
 * import { fromString, toString } from 'uint8arrays'
 * import { webRTC } from '@libp2p/webrtc'
 *
 * const node = await createLibp2p({
 *   transports: [webRTC()],
 *   connectionEncryption: [noise()],
 * })
 *
 * await node.start()
 *
 * const ma =  multiaddr('/ip4/0.0.0.0/udp/56093/webrtc/certhash/uEiByaEfNSLBexWBNFZy_QB1vAKEj7JAXDizRs4_SnTflsQ')
 * const stream = await node.dialProtocol(ma, ['/my-protocol/1.0.0'])
 * const message = `Hello js-libp2p-webrtc\n`
 * const response = await pipe([fromString(message)], stream, async (source) => await first(source))
 * const responseDecoded = toString(response.slice(0, response.length))
 * ```
 */
import { WebRTCTransport } from './private-to-private/transport.js';
import { WebRTCDirectTransport } from './private-to-public/transport.js';
/**
 * @param {WebRTCTransportDirectInit} init - WebRTC direct transport configuration
 * @param init.dataChannel - DataChannel configurations
 * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)
 * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)
 * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)
 * @returns
 */
function webRTCDirect(init) {
    return (components) => new WebRTCDirectTransport(components, init);
}
/**
 * @param {WebRTCTransportInit} init - WebRTC transport configuration
 * @param {RTCConfiguration} init.rtcConfiguration - RTCConfiguration
 * @param init.dataChannel - DataChannel configurations
 * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)
 * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)
 * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)
 * @returns
 */
function webRTC(init) {
    return (components) => new WebRTCTransport(components, init);
}
export { webRTC, webRTCDirect };
//# sourceMappingURL=index.js.map