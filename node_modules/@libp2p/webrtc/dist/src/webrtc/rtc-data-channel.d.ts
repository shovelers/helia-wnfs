import type node from 'node-datachannel';
export declare class DataChannel extends EventTarget implements RTCDataChannel {
    #private;
    binaryType: BinaryType;
    readonly maxPacketLifeTime: number | null;
    readonly maxRetransmits: number | null;
    readonly negotiated: boolean;
    readonly ordered: boolean;
    onbufferedamountlow: ((this: RTCDataChannel, ev: Event) => any) | null;
    onclose: ((this: RTCDataChannel, ev: Event) => any) | null;
    onclosing: ((this: RTCDataChannel, ev: Event) => any) | null;
    onerror: ((this: RTCDataChannel, ev: Event) => any) | null;
    onmessage: ((this: RTCDataChannel, ev: MessageEvent) => any) | null;
    onopen: ((this: RTCDataChannel, ev: Event) => any) | null;
    constructor(dataChannel: node.DataChannel, dataChannelDict?: RTCDataChannelInit);
    get id(): number;
    get label(): string;
    get protocol(): string;
    get bufferedAmount(): number;
    set bufferedAmountLowThreshold(threshold: number);
    get bufferedAmountLowThreshold(): number;
    get readyState(): RTCDataChannelState;
    close(): void;
    send(data: string): void;
    send(data: Blob): void;
    send(data: ArrayBuffer): void;
    send(data: ArrayBufferView): void;
}
//# sourceMappingURL=rtc-data-channel.d.ts.map