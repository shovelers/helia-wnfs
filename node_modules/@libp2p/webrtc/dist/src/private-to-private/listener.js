import { TypedEventEmitter } from '@libp2p/interface/events';
import { Circuit } from '@multiformats/mafmt';
export class WebRTCPeerListener extends TypedEventEmitter {
    peerId;
    transportManager;
    shutdownController;
    constructor(components, init) {
        super();
        this.peerId = components.peerId;
        this.transportManager = components.transportManager;
        this.shutdownController = init.shutdownController;
    }
    async listen() {
        this.safeDispatchEvent('listening', {});
    }
    getAddrs() {
        return this.transportManager
            .getListeners()
            .filter(l => l !== this)
            .map(l => l.getAddrs()
            .filter(ma => Circuit.matches(ma))
            .map(ma => {
            return ma.encapsulate(`/webrtc/p2p/${this.peerId}`);
        }))
            .flat();
    }
    async close() {
        this.shutdownController.abort();
        this.safeDispatchEvent('close', {});
    }
}
//# sourceMappingURL=listener.js.map