import { logger } from '@libp2p/logger';
const log = logger('libp2p:stream:converter');
/**
 * Convert a duplex iterable into a MultiaddrConnection.
 * https://github.com/libp2p/interface-transport#multiaddrconnection
 */
export function streamToMaConnection(props) {
    const { stream, remoteAddr } = props;
    const { sink, source } = stream;
    const mapSource = (async function* () {
        for await (const list of source) {
            if (list instanceof Uint8Array) {
                yield list;
            }
            else {
                yield* list;
            }
        }
    }());
    const maConn = {
        async sink(source) {
            try {
                await sink(source);
                close();
            }
            catch (err) {
                // If aborted we can safely ignore
                if (err.type !== 'aborted') {
                    // If the source errored the socket will already have been destroyed by
                    // toIterable.duplex(). If the socket errored it will already be
                    // destroyed. There's nothing to do here except log the error & return.
                    log(err);
                }
            }
        },
        source: mapSource,
        remoteAddr,
        timeline: { open: Date.now(), close: undefined },
        async close(options) {
            close();
            await stream.close(options);
        },
        abort(err) {
            close();
            stream.abort(err);
        }
    };
    function close() {
        if (maConn.timeline.close == null) {
            maConn.timeline.close = Date.now();
        }
    }
    return maConn;
}
//# sourceMappingURL=stream-to-ma-conn.js.map